extend
class ZArmor{
	/////////////////////
	// Defensive Stats //
	/////////////////////
	double //Armor Plating
		   PlateAbsorption;

	int //Magnetic Repulsion
		Magnet,
		MaxMagnet,
		
		//Plasma Shield
		Shield,
		MaxShield,
		ShieldDivider,
		
		//Hard Light Construct
		Light,
		MaxLight;

	virtual
	void InitDamage(ArmorInfo Info, in out ArmorStats Stats){
		//Major Armor Stats
		if(Info & AMR_PLATE)
			PlateAbsorption=Stats.PlateAbsorption;
		if(Info & AMR_ENERGY){
			Energy=MaxEnergy=Stats.Energy;
			EnergyRechargeRate=Stats.EnergyRechargeRate;
			EnergyRechargeAmount=Stats.EnergyRechargeAmount;
			IdleRechargeBonus=Stats.IdleRechargeBonus;
			if((Info & AMR_MAGNET) && (Info & AMR_MOWNPOWER)){
				Magnet=MaxMagnet=Stats.Magnet;
				MagnetRechargeRate=Stats.MagnetRechargeRate;
				MagnetRechargeAmount=Stats.MagnetRechargeAmount;
			}
			if((Info & AMR_SHIELD) && (Info & AMR_SOWNPOWER)){
				Shield=MaxShield=Stats.Shield;
				ShieldDivider=Stats.ShieldDivider;
				ShieldRechargeRate=Stats.ShieldRechargeRate;
				ShieldRechargeAmount=Stats.ShieldRechargeAmount;
			}
			if((Info & AMR_LIGHT) && (Info & AMR_LOWNPOWER))
				Light=MaxLight=Stats.Light;
				LightRechargeRate=Stats.LightRechargeRate;
				LightRechargeAmount=Stats.LightRechargeAmount;
		}
	}
	
	

	virtual
	int ModifyDamage(int Damage, Name Mod){
		let DamageType=ZManager.DamageType(Mod);
		if(!DamageType)return Damage;
		double Dam, TempDamage=Damage;
		//Powered Armor
		if(Info & AMR_ENERGY){
			//Magnetic Repulsion
			if(Info & AMR_MAGNET)
				if(Info & AMR_MOWNPOWER)
					if((Dam=TempDamage*DamageType.Factor(AMR_MAGNET))>0)
						if(Ceil(Dam)>Magnet){
							Magnet-=Dam;
							return 0;
						}else{
							TempDamage-=Floor(Magnet/DamageType.Factor(AMR_MAGNET));
							Magnet=0;
						}
					else if(Dam<0){
						Magnet=Clamp(Magnet-Ceil(Dam), 0, MaxMagnet);
						return 0;
					}
				else
					if((Dam=TempDamage*DamageType.Factor(AMR_MAGNET))>0)
						if(Ceil(Dam)<=Energy){
							Energy-=Dam;
							return 0;
						}else{
							TempDamage-=Floor(Energy/DamageType.Factor(AMR_MAGNET));
							Energy=0;
						}
					else if(Dam<0){
						Energy=Clamp(Energy-Ceil(Dam), 0, MaxEnergy);
						return 0;
					}

			//Hard Light Construct
			if(Info & AMR_LIGHT)
				if(Info & AMR_LOWNPOWER)
					if((Dam=TempDamage*DamageType.Factor(AMR_LIGHT))>0)
						if(Ceil(Dam)<=Light){
							Light-=Dam;
							return 0;
						}else{
							TempDamage-=Floor(Light/DamageType.Factor(AMR_LIGHT));
							Light=0;
						}
					else if(Dam<0){
						Light=Clamp(Light-Ceil(Dam), 0, MaxLight);
						return 0;
					}
				else
					if((Dam=TempDamage*DamageType.Factor(AMR_LIGHT))>0)
						if(Ceil(Dam)<=Energy){
							Energy-=Dam;
							return 0;
						}else{
							TempDamage-=Floor(Energy/DamageType.Factor(AMR_LIGHT));
							Energy=0;
						}
					else if(Dam<0){
						Energy=Clamp(Energy-Ceil(Dam), 0, MaxEnergy);
						return 0;
					}

			//Plasma Shield
			if(Info & AMR_SHIELD)
				if(Info & AMR_SOWNPOWER)
					if((Dam=TempDamage*DamageType.Factor(AMR_SHIELD))>0)
						if(Ceil(Dam)<=Shield){
							Shield-=Dam;
							return 0;
						}else{
							TempDamage-=Floor(Shield/DamageType.Factor(AMR_SHIELD));
							Shield=0;
						}
					else if(Dam<0){
						Shield=Clamp(Shield-Ceil(Dam), 0, MaxShield);
						return 0;
					}
				else
					if((Dam=TempDamage*DamageType.Factor(AMR_SHIELD))>0)
						if(Ceil(Dam)<=Energy){
							Energy-=Dam;
							return 0;
						}else{
							TempDamage-=Floor(Energy/DamageType.Factor(AMR_SHIELD));
							Energy=0;
						}
					else if(Dam<0){
						Energy=Clamp(Energy-Ceil(Dam), 0, MaxEnergy);
						return 0;
					}
		}
		int DurabilityHit;
		//Armor Plating
		if((Info & AMR_PLATE)){
			if((Dam=TempDamage*DamageType.Factor(AMR_PLATE))>0){
				TempDamage*=1-Floor(DurabilityHit=PlateAbsorption*Sqrt(Clamp(Durability/MaxDurability, 0, 2)));
				Durability-=DurabilityHit;
			}
		}else Durability-Ceil(TempDamage/2);
		return Ceil(TempDamage);
	}
}