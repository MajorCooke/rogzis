struct ArmorStats{
	ArmorSlot Slot;

	ArmorInfo Info;

	/////////////////////
	// Defensive Stats //
	/////////////////////
	double  //Armor Plating
		    PlateAbsorption;

	int //General
		IdleRechargeBonus,
		
		//Energy
		Energy,
		EnergyRechargeRate,
		EnergyRechargeAmount,
		
		//Magnetic Repulsion
		Magnet,
		MagnetRechargeRate,
		MagnetRechargeAmount,
		
		//Plasma Shield
		Shield,
		ShieldDivider,
		ShieldRechargeRate,
		ShieldRechargeAmount,
		
		//Hard Light Construct
		Light,
		LightRechargeRate,
		LightRechargeAmount;
}

class ZArmors:Registry{
	bool Add(ZArmor ZArmor)
	{return ZArmor && super.Add(ZArmor);}

	ZArmor Get(Name Name) const
	{return ZArmor(super.Get(Name));}

	ZArmor GetRand() const
	{return ZArmor(super.GetRand());}
}

class ZArmor:Item{
	protected
	ArmorSlot Slot;

	protected
	ArmorInfo Info;

	static
	ZArmor Create(String Name, String Description, ArmorSlot Slot, ArmorInfo Info, in out ArmorStats Stats, ThrustStats TStats=null, JetpackStats JStats=null, int Price=0, int Durability=0, int Width=-1, int Height=-1)
	{return new("ZArmor").Init(Name, Description, Slot, Info, Stats, TStats, JStats, Price, Durability, Width, Height);}

	protected
	ZArmor Init(String Name, String Description, ArmorSlot Slot, ArmorInfo Info, in out ArmorStats Stats, ThrustStats TStats, JetpackStats JStats, int Price, int Durability, int Width, int Height){
		self.Slot=Slot;
		self.Info=Info;
		//Damage Stats
		InitDamage(Info, Stats);
		//Armor Abilities
		if(Info & AMR_ENERGY){
			if(Info & AMR_THRUST)
				InitThrust(Slot, TStats);
			if(Info & AMR_JETPACK)
				InitJetpack(Slot, JStats);
		}
		//Item Initialization
		if(Width==-1)
			if(Slot==AMR_HEAD)
				Width=1;
			else
				Width=2;
		if(Height==-1)
			if(Slot==AMR_HEAD)
				Height=1;
			else if(Slot==AMR_HANDS || Slot==AMR_FEET)
				Height=1;
			else
				Height=2;
		return ZArmor(super.Init(Name, Description, Price, Durability, Width, Height));
	}
	
	clearscope
	ArmorSlot GetSlot() const
	{return Slot;}

	clearscope
	ArmorInfo GetInfo() const
	{return Info;}

	override
	void OnInventoryTick(ZPlayer Player){
		if(Info & AMR_ENERGY){
			//RechargeEnergy(Player, false); Might be OP
		}
	}

	virtual
	void OnArmorTick(ZPlayer Player){
		PlayerInfo PlayerInfo=Player.player;
		if(Info & AMR_ENERGY){
			RechargeEnergy(Player);
			if(Info & AMR_THRUST)
				switch(Slot){
					case AMR_FEET:
						SoftenFall(Player);
						break;
					default: break;
				}
		}
	}
}

#include "ZSCRIPT/Z/INV/ARMOR/ENERGY.zsc"
#include "ZSCRIPT/Z/INV/ARMOR/DAMAGE.zsc"
#include "ZSCRIPT/Z/INV/ARMOR/MOVEMENT.zsc"
#include "ZSCRIPT/Z/INV/ARMOR/ABILITIES.zsc"