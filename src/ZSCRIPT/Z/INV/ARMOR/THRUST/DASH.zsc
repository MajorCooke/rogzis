extend
class ZArmor{
	protected
	bool DashAvailable;

	protected
	int //Dash
		DashCost,
		DashTimer,
		DashOppurt,
		DashCooldown,
		DashCountdown,
		CurrentDashButton;

	virtual
	void CheckDash(ZPlayer Player, PlayerInfo PlayerInfo){
		//Dash
		if(DashCountdown>0)
			DashCountdown--;
		else{
			if(DashOppurt>0)
				DashOppurt--;
			else
				CurrentDashButton=666;
			static const int DashKeys[]={
				BT_FORWARD,
				BT_BACK,
				BT_MOVELEFT,
				BT_MOVERIGHT
			};
			for(int i=(Player.Vel.Z==0)?1:0; i<DashKeys.Size(); i++){
				if(((NewButtons & DashKeys[i]) ||
				   ((NewButtons & BT_SPEED) && (Player.Vel.Z!=0 || (~Buttons & BT_FORWARD)) && (Buttons & DashKeys[i]))) &&
				   (Player.GetEnergy()>DashCost)){
					if((CurrentDashButton==DashKeys[i] && DashOppurt>0) || ((Buttons & ~OldButtons) & BT_SPEED)){
						DrainEnergy(DashCost, Player);
						int MidAirBoost=Player.JumpZ,
							Power=ThrustPower*-1**i;
						if(Player.Vel.Z==0){
							MidAirBoost=0;
							Power*=2;
						}
						Player.A_ChangeVelocity(
							(DashKeys[i] & (BT_FORWARD|BT_BACK		))?Power:0,
							(DashKeys[i] & (BT_MOVELEFT|BT_MOVERIGHT))?Power:0,
							MidAirBoost, CVF_RELATIVE);
						DashCountdown=DashCooldown;
						DashOppurt=0;
					}else{
						CurrentDashButton=DashKeys[i];
						DashOppurt=DashTimer;
					}
					break;
				}
			}
		}
	}
}