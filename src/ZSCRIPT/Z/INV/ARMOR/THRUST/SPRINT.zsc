extend
class ZArmor{
	protected
	int //Sprint
		SprintCost;

	virtual
	void CheckSprint(ZPlayer Player, PlayerInfo PlayerInfo, bool Thrust=false){
		if(!Player.CountInv("ZCompensate"))Player.GiveInventory("ZCompensate", 1);
		//Sprinting
		if(Thrust && (~PlayerInfo.cmd.buttons & BT_BACK) &&
		   (PlayerInfo.cmd.buttons & BT_SPEED) &&
		   (PlayerInfo.cmd.buttons & BT_FORWARD) &&
		   (Player.GetEnergy()>SprintCost) &&
		   (Player.Health>Player.RunHealth)){
			Recharger=0;
			DrainEnergy(SprintCost, Player);
			Player.FindInventory("ZCompensate").Speed=ThrustPower/5.;
		//Backstep
		}else if(!Thrust && (PlayerInfo.cmd.buttons & BT_BACK))
			Player.FindInventory("ZCompensate").Speed=Player.SideMove1;
		else
			Player.FindInventory("ZCompensate").Speed=1;
	}
}

class ZCompensate:PowerSpeed{
	Default{
		Inventory.MaxAmount 1;
		Inventory.InterHubAmount 0;
		Powerup.Duration 0x7FFFFFFD;
	}
}