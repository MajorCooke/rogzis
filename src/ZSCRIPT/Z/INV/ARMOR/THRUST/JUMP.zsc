extend
class ZArmor{
	protected
	int //Jump
		JumpCost;

	virtual
	void CheckJump(ZPlayer Player, PlayerInfo PlayerInfo, bool Thrust=false){
		if(DashCountdown>0)DashCountdown--;
		else if(DashOppurt>0)DashOppurt--;
		else CurrentDashButton=666;
		// [RH] check for jump
		if(PlayerInfo.cmd.buttons & BT_JUMP){
			if(DashCountdown==0 && (~PlayerInfo.oldbuttons & BT_JUMP) && Player.GetEnergy()>DashCost){
				if(DashOppurt>0 || !PlayerInfo.OnGround){
					DrainEnergy(DashCost, Player);
					Player.Vel.Z+=ThrustPower/((Info & AMR_HEAVY)?4.:2.);
					DashCountdown=DashCooldown;
					DashOppurt=0;
				}else if(PlayerInfo.OnGround)DashOppurt=DashTimer;
			}
			if(PlayerInfo.CrouchOffset!=0)
				// Jumping while crouching will force an un-crouch but not jump
				PlayerInfo.Crouching=1;
			else if(Player.IsHeavy() && Player.GetEnergy()<JumpCost)
				return;
			else if(Player.WaterLevel>=2)
				Player.Vel.Z=4*Player.Speed;
			else if(Player.bNoGravity)
				Player.Vel.Z=3.;
			else if(Level.IsJumpingAllowed() && PlayerInfo.OnGround && PlayerInfo.JumpTics==0){
				if(Player.IsHeavy())DrainEnergy(JumpCost, Player);//Energy Usage for Jumping

				double JumpVelZ=(Player.IsHeavy()?.5:1)*ThrustPower*17.5/Player.TICRATE;
				double JumpFac=0;

				// [BC] If the player has the high jump power, double his jump velocity.
				// (actually, pick the best factors from all active items.)
				for (PowerHighJump p=PowerHighJump(Player.Inv); p!=null; p=PowerHighJump(p.Inv))
					if(p && p.Strength>JumpFac)JumpFac=p.Strength;

				if(JumpFac>0)JumpVelZ*=JumpFac;

				Player.Vel.Z+=JumpVelZ;
				Player.bOnMobj=false;
				PlayerInfo.JumpTics=-1;
				if(!(PlayerInfo.cheats&CF_PREDICTING))Player.A_PlaySound("*jump", CHAN_BODY);
			}
		}
	}
}