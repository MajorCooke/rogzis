enum ArmorInfo{
	//Armor Slots	-	Only One
	AMR_HEAD		=	1<<0,
	AMR_TORSO		=	1<<1,
	AMR_HANDS		=	1<<2,
	AMR_LEGS		=	1<<3,
	AMR_FEET		=	1<<4,

	//Armor Types	-	Multiple
	AMR_PLATE		=	1<<5,
	AMR_MAGNET		=	1<<6,
	AMR_SHIELD		=	1<<7,
	AMR_LIGHT		=	1<<8,

	//Attributes	-	Multiple
	AMR_ENERGY		=	1<<9, //Needed for AMR_MAGNET, AMR_PLASMA and AMR_LIGHT
	AMR_SEALED		=	1<<10,
	AMR_THRUST		=	1<<11,
	AMR_JETPACK		=	1<<12,
	AMR_MAGNIFY		=	1<<13,
	AMR_OWNPOWER	=	1<<14,
};

struct ArmorStats{
	int /////////////////////
		// Defensive Stats //
		/////////////////////
		//Energy
		Energy,
		EnergyRechargeRate,
		
		//Armor Plating
		Plate,
		PlateAbsorption,
		
		//Magnetic Repulsion
		Magneto,
		MagnetoRechargeRate,
		
		//Plasma Shield
		Shield,
		ShieldDivider,
		ShieldRechargeRate,
		
		//Hard Light Construct
		Light,
		LightRechargeRate,
		
		////////////////////
		// Abilties Stats //
		////////////////////
		ThrustPower,
		JetpackPower;
}

class Armors:Registry{
	bool Add(ArmorPiece ArmorPiece)
	{return ArmorPiece && super.Add(ArmorPiece);}
	
	ArmorPiece Get(Name Name) const
	{return ArmorPiece(super.Get(Name));}
	
	ArmorPiece GetRand() const
	{return ArmorPiece(super.GetRand());}
}

class ArmorPiece:Item{
	protected
	int /////////////////////
		// Defensive Stats //
		/////////////////////
		//Energy
		Energy,
		MaxEnergy,
		EnergyRechargeRate,
		
		//Armor Plating
		Plate,
		PlateAbsorption,
		
		//Magnetic Repulsion
		Magneto,
		MaxMagneto,
		MagnetoRechargeRate,
		
		//Plasma Shield
		Shield,
		MaxShield,
		ShieldDivider,
		ShieldRechargeRate,
		
		//Hard Light Construct
		Light,
		MaxLight,
		LightRechargeRate,
		
		////////////////////
		// Abilties Stats //
		////////////////////
		ThrustPower,
		JetpackPower;

	protected
	ArmorInfo Info;

	static
	ArmorPiece Create(String Name, String Description, in out ArmorStats Stats, ArmorInfo Info=0, int Price=0, int Durability=0, int Width=-1, int Height=-1)
	{return new("ArmorPiece").Init(Name, Description, Stats, Info, Price, Durability, Width, Height);}
	
	protected
	ArmorPiece Init(String Name, String Description, in out ArmorStats Stats, ArmorInfo Info, int Price, int Durability, int Width, int Height){
		//Armor Stats
		if(Info & AMR_PLATE){
			Plate=Stats.Plate;
			PlateAbsorption=Stats.PlateAbsorption;
		}
		if(Info & AMR_ENERGY){
			Energy=MaxEnergy=Stats.Energy;
			EnergyRechargeRate=Stats.EnergyRechargeRate;
			if(Info & AMR_OWNPOWER){
				if(Info & AMR_MAGNET){
					Magneto=MaxMagneto=Stats.Magneto;
					MagnetoRechargeRate=Stats.MagnetoRechargeRate;
				}
				if(Info & AMR_SHIELD){
					Shield=MaxShield=Stats.Shield;
					ShieldDivider=Stats.ShieldDivider;
					ShieldRechargeRate=Stats.ShieldRechargeRate;
				}
				if(Info & AMR_LIGHT){
					Light=MaxLight=Stats.Light;
					LightRechargeRate=Stats.LightRechargeRate;
				}
			}
			if(Info & AMR_THRUST)
				ThrustPower=Stats.ThrustPower;
			if(Info & AMR_JETPACK)
				JetpackPower=Stats.JetpackPower;
		}
		//Item Initialization
		if(Width==-1)
			if(Info & AMR_HEAD)
				Width=1;
			else
				Width=2;
		if(Height==-1)
			if(Info & AMR_HEAD)
				Height=1;
			else if((Info & AMR_HANDS) || (Info & AMR_FEET))
				Height=1;
			else
				Height=2;
		self.Info=Info;
		return ArmorPiece(super.Init(Name, Description, Price, Durability, Width, Height));
	}
	
	virtual
	void ModifyDamage(in out int Damage, Name DamageType, in out ZPlayer Player){
		//DamageType DamageType=
		/*int i;
		for(i=0; i<DamageTypes.Size(); i+=3)
			if(DamageType==DamageTypes[i]){
				//Shield
				if(DamageTypes[i+1].ToDouble()*Damage<=Shield){
					Shield-=DamageTypes[i+1].ToDouble()*Damage;
					Damage=0;
					break;
				}else{
					if(DamageTypes[i+2].ToDouble()*Damage<=Durability){
					}
				}
			}
		//Shield
		if(damage<=shield){
			shield=shield-damage;
			return 0;
		}else{
			//Armor
			damage=damage-shield;
			shield=0;
			if(damage*armorAbsorb<=armor){
				armor=armor-damage*armorAbsorb;
				damage=damage*(1-armorAbsorb);
			}else{
				damage=damage-armor;
				armor=0;
			}
		}
		return damage;*/
	}
}