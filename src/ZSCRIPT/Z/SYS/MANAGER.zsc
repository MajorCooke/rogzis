class ZManager:Thinker{
	private
	Items Items;

	private
	Armors Armors;

	private
	Weapons Weapons;

	private
	DamageTypes DamageTypes;

	private
	Parser_Zinf ParserZinf;

	private
	ZManager Init(){
		ChangeStatNum(STAT_STATIC);
		Items=new("Items");
		Armors=new("Armors");
		Weapons=new("Weapons");
		ParserZinf=Parser_Zinf.Create("ZCONFIG");
		//For registration
		int i=1; String LumpName; Parser_TSV ParserTSV; TSVRow Row;
		//DamageTypes
		DamageTypes=new("DamageTypes");
		while("N/@" != (LumpName=ParserZinf.GetFromArray("EXTERNAL", "tDAMAGE_TYPES", i++))){
			for(int j=0; j<(ParserTSV=Parser_TSV.Create(LumpName)).Size(); j++){
				Row=ParserTSV.GetRow(j);
				//Flags Management
				Array<String> Flags; Flags.Clear(); int ActualFlags=0;
				Row.Get(5).Split(Flags, "|", TOK_SKIPEMPTY);
				for(int k=0; k<Flags.Size(); k++)
					if(Flags[k]~=="DMG_ZONE")
						ActualFlags|=DMG_ZONE;
				//Registration
				DamageTypes.Add(ZDamageType.Create(Row.Get(0), Row.GetDouble(1), Row.GetDouble(2), Row.GetDouble(3), Row.GetDouble(4), ActualFlags));
			}
		}
		return self;
	}

	private
	static
	ZManager Get(){
		ThinkerIterator it=ThinkerIterator.Create("ZManager",STAT_STATIC);
		let p=ZManager(it.Next());
		if(!p)p=new("ZManager").Init();
		return p;
	}
	
	static
	void Debug(String str, Name kind){
		if(kind=="Health" && z_debug_health)
			console.printf(str);
		if(kind=="Movement" && z_debug_movement)
			console.printf(str);
	}
	
	static
	Parser_Zinf Config()
	{return Get().ParserZinf;}

	static
	Item Item(Name Name)
	{return Get().Items.Get(Name);}

	static
	ArmorPiece Armor(Name Name)
	{return Get().Armors.Get(Name);}

	static
	ZWeapon Weapon(Name Name)
	{return Get().Weapons.Get(Name);}

	static
	ZDamageType DamageType(Name Name)
	{return Get().DamageTypes.Get(Name);}
}