class ZDamageTypes:Registry{
    bool Add(ZDamageType DamageType)
    {return DamageType && super.Add(DamageType);}

    ZDamageType Get(Name ID) const
    {return ZDamageType(super.Get(ID));}
}

class ZDamageType:RegistryItem{
    private
    Name ID;

    private
    String Name;

    private
    ZDamageTypeInfo DamageFlags;

    private
    Array<double> Factors;

    static
    ZDamageType Create(Name ID, String Name, double ArmorPlating=1, double MagneticShield=1, double PlasmaShield=1, double HardLight=1, ZDamageTypeInfo DamageFlags=DMG_NONE)
    {return new("ZDamageType").Init(ID, Name, ArmorPlating, MagneticShield, PlasmaShield, HardLight, DamageFlags);}

    ZDamageType Init(Name ID, String Name, double ArmorPlating, double MagneticShield, double PlasmaShield, double HardLight, ZDamageTypeInfo DamageFlags=DMG_NONE){
        self.ID=ID;
        self.Name=Name;
        Factors.Resize(4);
        Factors[ZCalc.ShiftOf(AMR_PLATE)]=ArmorPlating;
        Factors[ZCalc.ShiftOf(AMR_MAGNET)]=MagneticShield;
        Factors[ZCalc.ShiftOf(AMR_SHIELD)]=PlasmaShield;
        Factors[ZCalc.ShiftOf(AMR_LIGHT)]=HardLight;
        self.DamageFlags=DamageFlags;
        return self;
    }

    override
    Name GetID() const
    {return ID;}

    override
    String GetName() const
    {return Name;}

    double Factor(ZArmorInfo AMR_TYPE) const
    {return Factors[ZCalc.ShiftOf(AMR_TYPE)];}

    int Flags() const
    {return DamageFlags;}
}