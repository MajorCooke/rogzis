enum ZEDamageInfo{
    // Effects  -   Multiple
    DMG_NONE    =   0,
    DMG_ZONE    =   1<<0,
}

class ZDamageTypes:ZRegistry{
    bool Add(ZDamageType DamageType)
    {return DamageType && super.Add(DamageType);}

    ZDamageType Get(Name ID) const
    {return ZDamageType(super.Get(ID));}
}

class ZDamageType:ZRegistryItem{
    private
    ZEDamageInfo DamageFlags;

    private
    double Factors[4];

    static
    ZDamageType Create(Name ID, String Name, double ArmorPlating=1, double MagneticShield=1, double PlasmaShield=1, double HardLight=1, ZEDamageInfo DamageFlags=DMG_NONE)
    {return new('ZDamageType').Init(ID, Name, ArmorPlating, MagneticShield, PlasmaShield, HardLight, DamageFlags);}

    ZDamageType Init(Name ID, String Name, double ArmorPlating, double MagneticShield, double PlasmaShield, double HardLight, ZEDamageInfo DamageFlags=DMG_NONE){
        self.ID=ID;
        self.Name=Name;
        Factors[ZCalc_S.ShiftOf(AMR_PLATE)]=ArmorPlating;
        Factors[ZCalc_S.ShiftOf(AMR_MAGNET)]=MagneticShield;
        Factors[ZCalc_S.ShiftOf(AMR_SHIELD)]=PlasmaShield;
        Factors[ZCalc_S.ShiftOf(AMR_LIGHT)]=HardLight;
        self.DamageFlags=DamageFlags;
        return self;
    }

    double Factor(ZEArmorInfo AMR_TYPE) const
    {return Factors[ZCalc_S.ShiftOf(AMR_TYPE)];}

    int Flags() const
    {return DamageFlags;}
}