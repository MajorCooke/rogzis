extend
class ZManager{
    ZEventManager EventManager;

    static
    clearscope
    void Debug(String Output, Name CVarName)
    {if(CVar.FindCVar(CVarName).GetBool())console.printf(Output);}

    static
    clearscope
    void Error(String Error, ZErrorLevel Level){
        switch(Level){
            case ERR_INFO:break;
            case ERR_WARNING:
                Console.PrintF("\cx%s", Error);
                break;
            case ERR_ERROR:
                Console.PrintF("\cr%s", Error);
                break;
            case ERR_FATAL:
                ThrowAbortException("\cy%s", Error);
                break;
            default:
                ThrowAbortException("Unclassified Error: '\cw%s'", Error);
                break;
        }
    }

    private
    void InitEvents(){}

    private
    void LoadEvents(){
        EventManager=ZEventManager.Instance();
    }
}

class ZEventManager:EventHandler{
    private
    Array<ZStimulus> Stimuli;

    private
    Array<ZReactor> Reactors;

    static
    ZEventManager Instance()
    {return ZEventManager(EventHandler.Find("ZEventManager"));}

    override
    void WorldTick(){
        for(int i=Stimuli.Size()-1; i>=0; i--){
            ZStimulus Stimulus=Stimuli[i];
            Stimulus.Tick();
            if(Stimulus.Decay==0){
                Stimuli.Delete(i);
                Stimulus.Destroy();
            }
        }
        for(int i=0; i<Reactors.Size(); i++)
            Reactors[i].Tick();
    }

    void SterStimulus(ZStimulus Stimulus){
        if(Stimuli.Find(Stimulus)!=Stimuli.Size())
            ZManager.Error(String.Format("Stimulus: %s is Already Registered", Stimulus.ID), ERR_ERROR);
        bool Consumed;
        for(int i=0; i<Reactors.Size(); i++)
            if(Reactors[i].React(Stimulus))
                Consumed=true;
        if(Consumed)
            Stimuli.Push(Stimulus);
        else Stimulus.Destroy();
    }

    void SterReactor(ZReactor Reactor){
        if(Reactors.Find(Reactor)!=Reactors.Size())
            ZManager.Error(String.Format("Reactor: %s", Reactor.ID), ERR_ERROR);
        Reactors.Push(Reactor);
    }
}