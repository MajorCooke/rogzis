class ZGraph play{
    Array<ZNode> Nodes;

    ZPlan GetPlan(ZNode StartNode, ZNode GoalNode){
        if(StartNode==GoalNode)
            return null;
        uint Index=Nodes.Find(StartNode);
        if(Index==Nodes.Size() || Nodes.Find(GoalNode)==Nodes.Size())
            ZManager.Error("Node doesn't exist", ERR_FATAL);
        Array<ZNode> Open,
                         Closed,
                         CameFrom;
        Open.Push(StartNode);
        CameFrom.Resize(Nodes.Size());
        Array<double> GCosts,
                      FCosts;
        for(int i=0; i<Nodes.Size(); i++)
            GCosts.Push(double.MAX);
        GCosts[Index]=0;
        for(int i=0; i<Nodes.Size(); i++)
            FCosts.Push(double.MAX);
        FCosts[Index]=StartNode.DistanceTo(GoalNode);
        while(Open.Size()>0){
            ZNode CurrentNode=Open[Open.Size()-1];
            if(CurrentNode==GoalNode){
                ZPlan Plan=new("ZPlan");
                while(CurrentNode){
                    Plan.Nodes.Push(CurrentNode);
                    CurrentNode=CameFrom[Nodes.Find(CurrentNode)];
                }
                return Plan;
            }
            Open.Pop();
            Closed.Push(CurrentNode);
            Index=Nodes.Find(CurrentNode);
            for(int i=0; i<CurrentNode.Edges.Size(); i++){
                ZEdge CurrentEdge=CurrentNode.Edges[i];
                ZNode NextNode=CurrentEdge.To;
                if(Closed.Find(NextNode)!=Closed.Size() || Nodes.Find(NextNode)==Nodes.Size())
                    continue;
                if(Open.Find(NextNode)==Open.Size())
                    Open.Push(NextNode);
                uint NextIndex=Nodes.Find(NextNode);
                double GCost=GCosts[Index]+CurrentEdge.Cost;
                if(GCost>=GCosts[NextIndex])
                    continue;
                CameFrom[NextIndex]=CurrentNode;
                GCosts[NextIndex]=GCost;
                FCosts[NextIndex]=GCost+NextNode.DistanceTo(GoalNode);
            }
            for(int i=0; i<Open.Size(); i++){
                uint IndexOfMax=i;
                for(int j=i+1; j<Open.Size(); j++){
                    if(FCosts[Nodes.Find(Open[j])]>FCosts[Nodes.Find(Open[IndexOfMax])])
                        IndexOfMax=j;
                }
                if(IndexOfMax!=i){
                    ZNode Temp=Open[i];
                    Open[i]=Open[IndexOfMax];
                    Open[IndexOfMax]=Temp;
                }
            }
        }
        return null;
    }
}

class ZPlan play{
    Array<ZNode> Nodes;

    ZNode Peek()
    {return Nodes[Nodes.Size()-1];}

    ZNode Pop(){
        ZNode Node=Peek();
        Nodes.Pop();
        return Node;
    }

    uint Size()
    {return Nodes.Size();}
}

class ZNode play{
    ZNodeType Type;

    Array<ZEdge> Edges;

    virtual
    ZNode Init(ZNodeType Type=0){
        self.Type=Type;
        return self;
    }

    virtual
    double DistanceTo(ZNode Other)
    {return 0;}
}

class ZEdge play{
    double Cost;

    ZNode To;

    static
    ZEdge Create(ZNode From, ZNode To){
        ZEdge Result=new("ZEdge");
        Result.Cost=From.DistanceTo(To);
        Result.To=To;
        return Result;
    }
}