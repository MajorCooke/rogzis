class ZMatrix{
    private
    uint Columns,
         Rows;

    private
    Array<double> Values;

    static
    {return new("ZMatrix").Init(Rows, Columns, false);}
    ZMatrix Create(uint Rows, uint Columns=1)

    static
    ZMatrix Identity(uint Size)
    {return new("ZMatrix").Init(Size, Size, true);}

    private
    ZMatrix Init(uint Rows, uint Columns, bool Ones){
        if(Rows<=0 || Columns<=0)
            ZManager.Error("Attempted to create a non-positively-sized matrix", ERR_FATAL);
        self.Rows=Rows;
        self.Columns=Columns;
        for(int i=0; i<Rows*Columns; i++)Values.Push(Ones);
        return self;
    }

    static
    ZMatrix Randomized(uint Rows, uint Columns, int Seed, double Floor=-1, double Ceiling=1)
    {return new("ZMatrix").Init(Rows, Columns, true).Noise(Seed, Floor, Ceiling);}

    void Set(uint Row, uint Column, double Value)
    {Values[Row*Columns+Column]=Value;}

    void V2Set(uint Row, uint Column, Vector2 Point, bool Row=true){
        if(Row){
            Set(Row, Column*2, Point.X);
            Set(Row, Column*2+1, Point.Y);
        }else{
            Set(Row*2, Column, Point.X);
            Set(Row*2+1, Column, Point.Y);
        }
    }

    //////////
    // Info //
    //////////
    double Get(uint Row, uint Column=0) const
    {return Values[Row*Columns+Column];}

    Vector2 V2Get(uint Row, uint Column=0, bool Row=true) const{
        if(Row)
            return (Get(Row, Column*2), Get(Row, Column*2+1));
        return (Get(Row*2, Column), Get(Row*2+1, Column));
    }

    ZMatrix Row(uint Index) const{
        ZMatrix Result=Create(1, Columns);
        for(int i=0; i<Columns; i++)
            Result.Set(0, i, Get(Index, i));
        return Result;
    }

    ZMatrix AsRow() const{
        ZMatrix Result=Create(Values.Size());
        for(int i=0; i<Values.Size(); i++)
            Result.Values[i]=Values[i];
        return Result;
    }

    uint Height() const
    {return Rows;}

    ZMatrix Col(uint Column) const{
        ZMatrix Result=Create(Rows);
        for(int i=0; i<Rows; i++)
            Result.Set(i, 0, Get(i, Column));
        return Result;
    }

    ZMatrix AsCol() const{
        ZMatrix Result=Create(1, Values.Size());
        for(int i=0; i<Values.Size(); i++)
            Result.Values[i]=Values[i];
        return Result;
    }

    uint Width() const
    {return Columns;}

    // All Values

    double ASum() const{
        double Total=0;
        for(int i=0; i<Values.Size(); i++)
            Total+=Values[i];
        return Total;
    }

    double AMin() const{
        double Min=Values[0];
        for(int i=1; i<Values.Size(); i++)
            Min=Min(Min, Values[i]);
        return Min;
    }

    double AMax() const{
        double Max=Values[0];
        for(int i=1; i<Values.Size(); i++)
            Max=Max(Max, Values[i]);
        return Max;
    }

    double ARange() const
    {return AMax()-AMin();}

    double AAMean() const
    {return ASum()/Values.Size();}

    double AGMean() const{
        double Total=1;
        for(int i=0; i<Values.Size(); i++)
            Total*=Values[i];
        return Total**(1/Values.Size());
    }

    double AHMean() const
    {return Values.Size()/SExponent(-1).ASum();}

    double AVariance(bool Statistic=true) const{
        double Total=0,
               Mean=AAMean();
        for(int i=0; i<Values.Size(); i++)
            Total+=(Values[i]-Mean)**2;
        return Total/(Values.Size()-Statistic);
    }

    double AStdDev(bool Statistic=true) const
    {return Sqrt(AVariance());}

    // Per Row/Column

    ZMatrix TSum(bool AsRow=false, bool ForRows=false) const{
        int Size=(ForRows)?Rows:Columns;
        ZMatrix Result=Create((AsRow)?1:Size, (!AsRow)?1:Size);
        for(int i=0; i<Size; i++){
            if(ForRows)
                Result.Values[i]=Row(i).ASum();
            else Result.Values[i]=Col(i).ASum();
        }
        return Result;
    }

    ZMatrix TMin(bool AsRow=false, bool ForRows=false) const{
        int Size=(ForRows)?Rows:Columns;
        ZMatrix Result=Create((AsRow)?1:Size, (!AsRow)?1:Size);
        for(int i=0; i<Size; i++){
            if(ForRows)
                Result.Values[i]=Row(i).AMin();
            else Result.Values[i]=Col(i).AMin();
        }
        return Result;
    }

    ZMatrix TMax(bool AsRow=false, bool ForRows=false) const{
        int Size=(ForRows)?Rows:Columns;
        ZMatrix Result=Create((AsRow)?1:Size, (!AsRow)?1:Size);
        for(int i=0; i<Size; i++){
            if(ForRows)
                Result.Values[i]=Row(i).AMax();
            else Result.Values[i]=Col(i).AMax();
        }
        return Result;
    }

    ZMatrix TRange(bool AsRow=false, bool ForRows=false) const{
        return TMax(AsRow, ForRows).Subtract(TMin(AsRow, ForRows));
    }

    ZMatrix TAMean(bool AsRow=false, bool ForRows=false) const{
        int Size=(ForRows)?Rows:Columns;
        ZMatrix Result=Create((AsRow)?1:Size, (!AsRow)?1:Size);
        for(int i=0; i<Size; i++){
            if(ForRows)
                Result.Values[i]=Row(i).AAMean();
            else Result.Values[i]=Col(i).AAMean();
        }
        return Result;
    }

    ZMatrix TGMean(bool AsRow=false, bool ForRows=false) const{
        int Size=(ForRows)?Rows:Columns;
        ZMatrix Result=Create((AsRow)?1:Size, (!AsRow)?1:Size);
        for(int i=0; i<Size; i++){
            if(ForRows)
                Result.Values[i]=Row(i).AGMean();
            else Result.Values[i]=Col(i).AGMean();
        }
        return Result;
    }

    ZMatrix THMean(bool AsRow=false, bool ForRows=false) const{
        int Size=(ForRows)?Rows:Columns;
        ZMatrix Result=Create((AsRow)?1:Size, (!AsRow)?1:Size);
        for(int i=0; i<Size; i++){
            if(ForRows)
                Result.Values[i]=Row(i).AHMean();
            else Result.Values[i]=Col(i).AHMean();
        }
        return Result;
    }

    ZMatrix TVariance(bool Statistic=true, bool AsRow=false, bool ForRows=false) const{
        int Size=(ForRows)?Rows:Columns;
        ZMatrix Result=Create((AsRow)?1:Size, (!AsRow)?1:Size);
        for(int i=0; i<Size; i++){
            if(ForRows)
                Result.Values[i]=Row(i).AVariance();
            else Result.Values[i]=Col(i).AVariance();
        }
        return Result;
    }

    ZMatrix TStdDev(bool Statistic=true, bool AsRow=false, bool ForRows=false) const
    {return TVariance(Statistic, AsRow, ForRows).SExponent(.5);}

    ///////////////////
    // Manipulations //
    ///////////////////
    ZMatrix Add(ZMatrix Other) const{
        if(Rows!=Other.Rows || Columns!=Other.Columns)
            ZManager.Error("Attempted to add differently-sized matrices", ERR_FATAL);
        ZMatrix Result=ZMatrix.Create(Rows, Columns);
        for(int i=0; i<Values.Size(); i++)
            Result.Values[i]=Values[i]+Other.Values[i];
        return Result;
    }

    ZMatrix Subtract(ZMatrix Other) const{
        if(Rows!=Other.Rows || Columns!=Other.Columns)
            ZManager.Error("Attempted to subtract differently-sized matrices", ERR_FATAL);
        ZMatrix Result=ZMatrix.Create(Rows, Columns);
        for(int i=0; i<Values.Size(); i++)
            Result.Values[i]=Values[i]-Other.Values[i];
        return Result;
        return Add(Other.SMultiply(-1));
    }

    ZMatrix Multiply(ZMatrix Other){
        if(Rows!=Other.Rows || Columns!=Other.Columns)
            ZManager.Error("Attempted to multiply differently-sized matrices", ERR_FATAL);
        ZMatrix Result=ZMatrix.Create(Rows, Columns);
        for(int i=0; i<Values.Size(); i++)
            Result.Values[i]=Values[i]*Other.Values[i];
        return Result;
    }

    ZMatrix Divide(ZMatrix Other){
        if(Rows!=Other.Rows || Columns!=Other.Columns)
            ZManager.Error("Attempted to multiply differently-sized matrices", ERR_FATAL);
        ZMatrix Result=ZMatrix.Create(Rows, Columns);
        for(int i=0; i<Values.Size(); i++)
            Result.Values[i]=Values[i]/Other.Values[i];
        return Result;
    }

    ZMatrix SMultiply(double Multiplier) const{
        ZMatrix Result=ZMatrix.Create(Rows, Columns);
        for(int i=0; i<Values.Size(); i++)
            Result.Values[i]=Values[i]*Multiplier;
        return Result;
    }

    ZMatrix SDivide(double Divisor) const{
        ZMatrix Result=ZMatrix.Create(Rows, Columns);
        for(int i=0; i<Values.Size(); i++)
            Result.Values[i]=Values[i]/Divisor;
        return Result;
    }

    ZMatrix SExponent(double Degree){
        ZMatrix Result=ZMatrix.Create(Rows, Columns);
        for(int i=0; i<Values.Size(); i++)
            Result.Values[i]=Values[i]**Degree;
        return Result;
    }

    ZMatrix MMultiply(ZMatrix Other) const{
        if(Columns!=Other.Rows)
            ZManager.Error("Attempted to multiply incorrectly-sized matrices", ERR_FATAL);
        ZMatrix Result=ZMatrix.Create(Rows, Other.Columns);
        for(int Row=0; Row<Result.Rows; Row++)
            for(int Column=0; Column<Result.Columns; Column++){
                double Value=0;
                for(int i=0; i<Columns; i++)
                    Value+=Get(Row, i)*Other.Get(i, Column);
                Result.Set(Row, Column, Value);
            }
        return Result;
    }

    ZMatrix SMin(double Min, double Min2=int.max) const{
        ZMatrix Result=Create(Rows, Columns);
        for(int i=0; i<Values.Size(); i++)
            Result.Values[i]=Min(Values[i], Min, Min2);
        return Result;
    }

    ZMatrix MMin(ZMatrix Min, ZMatrix Min2=null) const{
        if(Rows!=Min.Rows || Columns!=Min.Columns || (Min2 && (Rows!=Min2.Rows || Columns!=Min2.Columns)))
            ZManager.Error("Attempted to min differently-sized matrices", ERR_FATAL);
        ZMatrix Result=Create(Rows, Columns);
        for(int i=0; i<Values.Size(); i++)
            Result.Values[i]=Min(Values[i], Min.Values[i], (Min2)?Min2.Values[i]:int.max);
        return Result;
    }

    ZMatrix SMax(double Max, double Max2=int.min) const{
        ZMatrix Result=Create(Rows, Columns);
        for(int i=0; i<Values.Size(); i++)
            Result.Values[i]=Max(Values[i], Max, Max2);
        return Result;
    }

    ZMatrix MMax(ZMatrix Max, ZMatrix Max2=null) const{
        if(Rows!=Max.Rows || Columns!=Max.Columns || (Max2 && (Rows!=Max2.Rows || Columns!=Max2.Columns)))
            ZManager.Error("Attempted to min differently-sized matrices", ERR_FATAL);
        ZMatrix Result=Create(Rows, Columns);
        for(int i=0; i<Values.Size(); i++)
            Result.Values[i]=Max(Values[i], Max.Values[i], (Max2)?Max2.Values[i]:int.min);
        return Result;
    }

    ZMatrix SClamp(double Min, double Max) const{
        ZMatrix Result=Create(Rows, Columns);
        for(int i=0; i<Values.Size(); i++)
            Result.Values[i]=Clamp(Values[i], Min, Max);
        return Result;
    }

    ZMatrix MClamp(ZMatrix Min, ZMatrix Max) const{
        if(Rows!=Min.Rows || Columns!=Min.Columns || Rows!=Max.Rows || Columns!=Max.Columns)
            ZManager.Error("Attempted to min differently-sized matrices", ERR_FATAL);
        ZMatrix Result=Create(Rows, Columns);
        for(int i=0; i<Values.Size(); i++)
            Result.Values[i]=Clamp(Values[i], Min.Values[i], Max.Values[i]);
        return Result;
    }

    ZMatrix Transpose() const{
        ZMatrix Result=Create(Columns, Rows);
        for(int Row=0; Row<Rows; Row++)
            for(int Column=0; Column<Columns; Column++)
                Result.Set(Column, Row, Get(Row, Column));
        return Result;
    }

    ZMatrix Clone() const
    {return SMultiply(1);}

    ZMatrix Mutate(int Seed, double Floor=0, double Ceiling=1, double MaxChange=1, double MutationRate=.1) const{
        ZMatrix Result=Randomized(Rows, Columns, Seed).SMultiply(MaxChange),
                Chance=Randomized(Values.Size(), Seed+1, 0).SMax(MutationRate);
        for(int i=0; i<Values.Size(); i++)
            if(Chance.Values[i]<=MutationRate)
                Result.Values[i]=Clamp(Values[i]+Result.Values[i], Floor, Ceiling);
            else Result.Values[i]=Values[i];
        return Result;
    }

    ZMatrix Noise(int Seed=int('NoiseyBoi'), double Floor=-1, double Ceiling=1) const{
        SetRandomSeed[NoiseyBoi](Seed);
        ZMatrix Result=ZMatrix.Create(Rows, Columns);
        for(int Row=0; Row<Rows; Row++)
            for(int Column=0; Column<Columns; Column++)
                Result.Set(Row, Column, Get(Row, Column)*FRandom[NoiseyBoi](Floor, Ceiling));
        return Result;
    }

    ZMatrix SmoothNoise(int Octave) const{
        ZMatrix Result=Create(Rows, Columns);
        int Period=2**Octave;
        double Frequency=1/Period;
        for(int i=0; i<Rows; i++){
            int i1=i/Period*Period,
                i2=(i1+Period)%Rows;
            float HBlend=(i-i1)*Frequency;
            for(int j=0; j<Columns; j++){
                int j1=(j/Period)*Period,
                    j2=(j1+Period)%Columns;
                Result.Set(i, j, ZCalc.Lerp((j-j1)*Frequency, ZCalc.Lerp(HBlend, Get(i1, j1), Get(i2, j1)), ZCalc.Lerp(HBlend, Get(i1, j2), Get(i2, j2))));
            }
        }
        return Result;
    }
}