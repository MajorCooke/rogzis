class ZMatrix{
    private
    int Columns,
        Rows;

    private
    Array<double> Values;

    static
    ZMatrix Create(int Rows, int Columns)
    {return new("ZMatrix").Init(Rows, Columns, false);}

    static
    ZMatrix Identity(int Size)
    {return new("ZMatrix").Init(Size, Size, true);}

    private
    ZMatrix Init(int Rows, int Columns, bool Ones){
        if(Rows<=0 || Columns<=0)
            ZManager.Error("Attempted to create a non-positively-sized matrix", ERR_FATAL);
        self.Rows=Rows;
        self.Columns=Columns;
        Values.Resize(Rows*Columns);
        for(int i=0; i<Values.Size(); i++)Values[i]=Ones;
        return self;
    }

    static
    ZMatrix FromArray(ZArray_String Array){
        ZMatrix Matrix=new("ZMatrix").Init(1, Array._.Size(), false);
        for(int i=0; i<Matrix.Width(); i++)
            Matrix.Set(0, i, Array._[i].ToDouble());
        return Matrix;
    }

    static
    ZMatrix WhiteNoise(int Rows, int Columns, int Seed)
    {return new("ZMatrix").Init(Rows, Columns, true).Noise(Seed);}

    double Set(uint Row, uint Column, double Value)
    {return Values[Row*Columns+Column]=Value;}

    double Get(uint Row, uint Column) const
    {return Values[Row*Columns+Column];}

    uint Height() const
    {return Rows;}

    uint Width() const
    {return Columns;}

    ZMatrix Add(ZMatrix Other) const{
        if(Rows!=Other.Rows || Columns!=Other.Columns)ZManager.Error("Attempted to add differently-sized matrices", ERR_FATAL);
        ZMatrix Result=ZMatrix.Create(Rows, Columns);
        for(int Row=0; Row<Rows; Row++)
            for(int Column=0; Column<Columns; Column++)
                Result.Set(Row, Column, Get(Row, Column)+Other.Get(Row, Column));
        return Result;
    }

    ZMatrix Subtract(ZMatrix Other) const{
        if(Rows!=Other.Rows || Columns!=Other.Columns)ZManager.Error("Attempted to add differently-sized matrices", ERR_FATAL);
        ZMatrix Result=ZMatrix.Create(Rows, Columns);
        for(int Row=0; Row<Rows; Row++)
            for(int Column=0; Column<Columns; Column++)
                Result.Set(Row, Column, Get(Row, Column)-Other.Get(Row, Column));
        return Result;
    }

    ZMatrix Multiply(ZMatrix Other){
        if(Rows!=Other.Rows || Columns!=Other.Columns)ZManager.Error("Attempted to multiply differently-sized matrices", ERR_FATAL);
        ZMatrix Result=ZMatrix.Create(Rows, Columns);
        for(int Row=0; Row<Rows; Row++)
            for(int Column=0; Column<Columns; Column++)
                Result.Set(Row, Column, Get(Row, Column)*Other.Get(Row, Column));
        return Result;
    }

    ZMatrix SMultiply(double Multiplier) const{
        ZMatrix Result=ZMatrix.Create(Rows, Columns);
        for(int Row=0; Row<Rows; Row++)
            for(int Column=0; Column<Columns; Column++)
                Result.Set(Row, Column, Get(Row, Column)*Multiplier);
        return Result;
    }

    ZMatrix MMultiply(ZMatrix Other) const{
        if(Columns!=Other.Rows)ZManager.Error("Attempted to multiply incorrectly-sized matrices", ERR_FATAL);
        ZMatrix Result=ZMatrix.Create(Rows, Other.Columns);
        for(int Row=0; Row<Result.Rows; Row++)
            for(int Column=0; Column<Result.Columns; Column++){
                double Value=0;
                for(int i=0; i<Columns; i++)
                    Value+=Get(Row, i)*Other.Get(i, Column);
                Result.Set(Row, Column, Value);
            }
        return Result;
    }

    ZMatrix Transpose() const{
        ZMatrix Result=Create(Columns, Rows);
        for(int Row=0; Row<Rows; Row++)
            for(int Column=0; Column<Columns; Column++)
                Result.Set(Column, Row, Get(Row, Column));
        return Result;
    }

    ZMatrix Noise(int Seed=int('NoiseyBoi')) const{
        SetRandomSeed[NoiseyBoi](Seed);
        ZMatrix Result=ZMatrix.Create(Rows, Columns);
        for(int i=0; i<Rows; i++)
            for(int j=0; j<Columns; j++)
                Result.Set(i, j, Get(i, j)*FRandom[NoiseyBoi](0, 1));
        return Result;
    }

    ZMatrix SmoothNoise(int Octave) const{
        ZMatrix Result=Create(Rows, Columns);
        int Period=2**Octave;
        double Frequency=1/Period;
        for(int i=0; i<Rows; i++){
            int i1=i/Period*Period,
                i2=(i1+Period)%Rows;
              float HBlend=(i-i1)*Frequency;
            for(int j=0; j<Columns; j++){
                int j1=(j/Period)*Period,
                    j2=(j1+Period)%Columns;
                Result.Set(i, j, ZCalc.Lerp((j-j1)*Frequency, ZCalc.Lerp(HBlend, Get(i1, j1), Get(i2, j1)), ZCalc.Lerp(HBlend, Get(i1, j2), Get(i2, j2))));
            }
        }
        return Result;
    }
}