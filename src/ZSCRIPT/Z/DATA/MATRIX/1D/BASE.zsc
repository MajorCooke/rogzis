class ZVector{
    private
    uint __Length__;

    Array<double> Values;

    static
    ZVector Create(uint Length, bool Ones=false){
        ZVector Result=new('ZVector');
        Result.__Length__=Length;
        for(int i=0; i<Length; i++)
            Result.Values.Push(Ones);
        return Result;
    }

    static
    ZVector Randomized(uint Length, double Floor=-1, double Ceiling=1, int Seed=0){
        ZVector Result=Create(Length, true).Noise(Floor, Ceiling, Seed);
        return Result;
    }

    static
    ZVector FromV2(Vector2 Vec){
        ZVector Result=Create(2);
        Result.Set(0, Vec.X);
        Result.Set(1, Vec.Y);
        return Result;
    }

    static
    ZVector FromV3(Vector3 Vec){
        ZVector Result=Create(3);
        Result.Set(0, Vec.X);
        Result.Set(1, Vec.Y);
        Result.Set(2, Vec.Z);
        return Result;
    }

    //////////
    // Info //
    //////////

    double Get(uint Index) const
    {return Values[Index];}

    uint Size() const
    {return __Length__;}

    double Length() const
    {return Sqrt(LengthSquared());}

    double LengthSquared() const
    {return VDot(Clone());}

    ZVector Midpoint(ZVector Other) const
    {return Add(Other).SDiv(2);}

    ///////////////////
    // Manipulations //
    ///////////////////

    virtual
    void Set(uint Index, double Value)
    {Values[Index]=Value;}

    ZVector Add(ZVector Other) const{
        if(__Length__!=Other.__Length__)
            ZDebug.Error("Attempted to add differently-sized vectors", ERR_FATAL);
        ZVector Result=Create(__Length__);
        for(int i=0; i<Values.Size(); i++)
            Result.Values[i]=Values[i]+Other.Values[i];
        return Result;
    }

    ZVector Sub(ZVector Other) const{
        if(__Length__!=Other.__Length__)
            ZDebug.Error("Attempted to subtract differently-sized vectors", ERR_FATAL);
        ZVector Result=Create(__Length__);
        for(int i=0; i<Values.Size(); i++)
            Result.Values[i]=Values[i]-Other.Values[i];
        return Result;
    }

    ZVector Mul(ZVector Other) const{
        if(__Length__!=Other.__Length__)
            ZDebug.Error("Attempted to multiply differently-sized vectors", ERR_FATAL);
        ZVector Result=Create(__Length__);
        for(int i=0; i<Values.Size(); i++)
            Result.Values[i]=Values[i]*Other.Values[i];
        return Result;
    }

    ZVector Div(ZVector Other) const{
        if(__Length__!=Other.__Length__)
            ZDebug.Error("Attempted to divide differently-sized vectors", ERR_FATAL);
        ZVector Result=Create(__Length__);
        for(int i=0; i<Values.Size(); i++)
            Result.Values[i]=Values[i]/Other.Values[i];
        return Result;
    }

    virtual
    ZVector Map(ZF_Base Function) const{
        ZVector Result=Create(__Length__);
        for(int i=0; i<__Length__; i++)
            Result.Values[i]=Function.Apply(Values[i]);
        return Result;
    }

    ZVector SMul(double Multiplier){
        ZVector Result=ZVector.Create(__Length__);
        for(int i=0; i<Values.Size(); i++)
            Result.Values[i]=Values[i]*Multiplier;
        return Result;
    }

    ZVector SDiv(double Divisor){
        ZVector Result=ZVector.Create(__Length__);
        for(int i=0; i<Values.Size(); i++)
            Result.Values[i]=Values[i]/Divisor;
        return Result;
    }

    ZVector SExponent(double Degree){
        ZVector Result=ZVector.Create(__Length__);
        for(int i=0; i<Values.Size(); i++)
            Result.Values[i]=Values[i]**Degree;
        return Result;
    }

    double VDot(ZVector Other) const{
        if(__Length__!=Other.Size())
            ZDebug.Error("Attempted to dot incorrectly-sized vectors", ERR_FATAL);
        double Total=0;
        for(int Index=0; Index<__Length__; Index++)
            Total+=Get(Index)*Other.Get(Index);
        return Total;
    }

    ZVector M2Mul(ZMatrix2 Other) const
    {return ToM2(__Length__==Other.Height()).M2Mul(Other).ToV();}

    ZVector SClamp(double Min, double Max){
        ZVector Result=Create(__Length__);
        for(int i=0; i<Values.Size(); i++)
            Result.Values[i]=Clamp(Values[i], Min, Max);
        return Result;
    }

    ZVector Noise(double Floor, double Ceiling, int Seed=0) const{
        if(!Seed)
            Seed=ZUtil.RandSeed();
        SetRandomSeed[NoiseyBoi](Seed);
        ZVector Result=Create(__Length__);
        for(int Index=0; Index<Values.Size(); Index++)
            Result.Values[Index]=Values[Index]*FRandom[NoiseyBoi](Floor, Ceiling);
        return Result;
    }

    ////////////////
    // Transforms //
    ////////////////

    ZVector Unit() const
    {return Clone().SDiv(Length());}

    Vector2 ToV2() const{
        if(__Length__!=2)
            ZDebug.Error("Attempted to convert ZVector to Vector2: Is not 2 values", ERR_FATAL);
        return (Values[0], Values[1]);
    }

    Vector3 ToV3() const{
        if(__Length__!=3)
            ZDebug.Error("Attempted to convert ZVector to Vector3: Is not 3 values", ERR_FATAL);
        return (Values[0], Values[1], Values[2]);
    }

    ZMatrix2 ToM2(bool AsRow=false) const{
        ZMatrix2 Result=ZMatrix2.Create((AsRow)?1:__Length__, (!AsRow)?1:__Length__);
        Result.Values.Copy(Values);
        return Result;
    }

    virtual
    ZVector Clone() const{
        ZVector Result=Create(__Length__);
        Result.Values.Copy(Values);
        return Result;
    }
}