extend
class ZMatrix2{
    static
    ZMatrix2 Null_3D()
    {return Create(4, 4);}

    static
    ZMatrix2 Identity_3D()
    {return Identity(4);}

    static
    ZMatrix2 Pure_3D(){
        ZMatrix2 Result=Identity_3D();
        Result.Swap(3, 2, 3, 3);
        return Result;
    }

    static
    ZMatrix2 Translate_3D(Vector3 Displacement){
        ZMatrix2 Result=Identity_3D();
        Result.Set(0, 3, Displacement.X);
        Result.Set(1, 3, Displacement.Y);
        Result.Set(2, 3, Displacement.Z);
        return Result;
    }

    static
    ZMatrix2 Scale_3D(Vector3 Scale){
        ZMatrix2 Result=Identity_3D();
        Result.Set(0, 0, Scale.X);
        Result.Set(1, 1, Scale.Y);
        Result.Set(2, 2, Scale.Z);
        return Result;
    }

    static
    ZMatrix2 Rotate_3D(double Angle, Vector3 Axis){
        ZMatrix2 Result=Identity_3D();
        Axis=Axis.Unit();
        double C=Cos(Angle),
               MinC=1-C,
               XZ=Axis.X*Axis.Z,
               YZ=Axis.Y*Axis.Z;
        Vector3 SAxis=Axis*Sin(Angle);
        Result.Set(0, 0, C+Axis.X**2*MinC);
        Result.Set(1, 1, C+Axis.Y**2*MinC);
        Result.Set(2, 2, C+Axis.Z**2*MinC);
        Result.Set(0, 1, YZ*MinC-SAxis.Z);
        Result.Set(1, 0, YZ*MinC+SAxis.Z);
        Result.Set(2, 0, XZ*MinC-SAxis.Y);
        Result.Set(0, 2, XZ*MinC+SAxis.Y);
        Result.Set(1, 2, YZ*MinC-SAxis.X);
        Result.Set(2, 1, YZ*MinC+SAxis.Z);
        return Result;
    }

    static
    ZMatrix2 SwapYZ(){
        ZMatrix2 Result=Identity_3D();
        Result.Swap(1, 1, 1, 2);
        Result.Set(2, 1, -1);
        Result.Set(2, 2, 0);
        return Result;
    }

    static
    ZMatrix2 Perspective(double FoVY, double Aspect, double Z_Near, double Z_Far){
        double F=1/Tan(FoVY/2);
        ZMatrix2 Result=Null_3D();
        Result.Set(0, 0, F/Aspect);
        Result.Set(1, 1, F);
        Result.Set(2, 2, (Z_Far-Z_Near)/(Z_Near-Z_Far));
        Result.Set(2, 3, (2*Z_Far*Z_Near)/(Z_Near-Z_Far));
        Result.Set(3, 2, -1);
        return Result;
    }

    static
    ZMatrix2 WorldToView(Vector3 Pos, double Yaw, double Pitch, double Roll){
        Vector2 Ang=(Cos(Pitch), Sin(Pitch)*Level.PixelStretch);
        double ALen=Ang.Length(),
               AdjPitch=ASin(Ang.Y/ALen),
               AdjYaw=Yaw-90;
        ZMatrix2 Result=Rotate_3D(Roll, (0, 0, 1))
                       .M2Mul(Rotate_3D(AdjPitch, (1, 0, 0)))
                       .M2Mul(Rotate_3D(AdjYaw, (0, -1, 0)))
                       .M2Mul(Scale_3D((1, Level.PixelStretch, 1)))
                       .M2Mul(SwapYZ())
                       .M2Mul(Translate_3D(-Pos));
        return Result;
    }

    static
    ZMatrix2 WorldToClip(Vector3 Pos, double Yaw, double Pitch, double Roll, double FoV){
        return Perspective(ZScreen.FoVY(FoV), ZScreen.AspectRatio(), 5, 65535)
              .M2Mul(WorldToView(Pos, Yaw, Pitch, Roll));
    }

    ZMatrix2 ToClip(double FoV){
        return Perspective(ZScreen.FoVY(FoV), ZScreen.AspectRatio(), 5, 65535)
              .M2Mul(self);
    }

    enum ZE_HomogeneousCoord{
        HM_DIRECTION,
        HM_POSITION,
    }

    ZVector V3Mul(Vector3 Vec, double W=HM_POSITION){
        ZVector Vector=ZVector.Create(4);
        Vector.Set(0, Vec.X);
        Vector.Set(1, Vec.Y);
        Vector.Set(2, Vec.Z);
        if(W<HM_DIRECTION || HM_POSITION<W)
            ZDebug.Error("Invalid homogeneous coordinate: "..W, ERR_FATAL);
        Vector.Set(3, W);
        return VMul(Vector).ToV();
    }
}