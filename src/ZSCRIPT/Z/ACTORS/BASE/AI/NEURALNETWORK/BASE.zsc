class ZNeuralNetwork{
    private
    uint Inputs;

    private
    Array<ZNeuralLayer> Layers;

    static
    ZNeuralNetwork Create(uint Inputs){
        ZNeuralNetwork Result=new('ZNeuralNetwork');
        Result.Inputs=Inputs;
        return Result;
    }

    bool Push(ZNeuralLayer Layer)
    {return Layers.Push(Layer);}

    ZMatrix Get(ZMatrix Input){
        for(int i=0; i<Layers.Size(); i++)
            Input=Layers[i].Get(Input);
        return Input;
    }

    void Train(ZMatrix InputVals, ZMatrix TargetVals){
        for(int i=0; i<InputVals.Height(); i++){
            ZMatrix Input=InputVals.Row(i).AsRow(),
                    Target=TargetVals.Row(i).AsRow();
            Array<ZMatrix> Inputs; Inputs.Clear();
            Inputs.Push(Input);
            for(int j=0; j<Layers.Size()-1; j++)
                Inputs.Push(Input=Layers[j].Get(Input));
            ZMatrix Error=Target.Subtract(Layers[Layers.Size()-1].Get(Input));
            for(int j=Layers.Size()-1; j>=0; j--)
                Error=Layers[j].Train(Inputs[j], Error, (j+1<Layers.Size())?Layers[j+1].Weights():null, j==Layers.Size()-1);
        }
    }
}