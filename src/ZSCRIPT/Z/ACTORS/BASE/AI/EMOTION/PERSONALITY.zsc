extend
class ZPersonality{
    ZMatrix Facets;

    static
    ZPersonality Create(ZMatrix Facets, bool Mutate=true)
    {return new("ZPersonality").Init(Facets.Clone(), Mutate);}

    static
    ZPersonality Randomized()
    {return new("ZPersonality").Init(Randomized: true);}

    private
    ZPersonality Init(ZMatrix Facets=null, bool Mutate=true, bool Randomized=false){
        if(Randomized || !Facets)
            self.Facets=ZMatrix.Randomized(DIMENSIONS, FACETCOUNT, ZManager.MapSeed(self)^Random(int.min, int.max), 0);
        else if(Mutate)
            self.Facets=Facets.Mutate(ZManager.MapSeed(self)^Random(int.min, int.max), MaxChange: .5, MutationRate: .25);
        else self.Facets=Facets.SClamp(0, 1);
        Update();
        return self;
    }

    ZPersonality Clone() const{
        ZPersonality Result=new("ZPersonality");
        Result.Facets=Facets.Clone();
        return Result;
    }
}