class ZNL_Dense:ZNeuralLayer{
    private
    uint Inputs,
         Outputs;

    private
    double LearningRate;

    private
    ZMatrix2 In2Out,
            Bias;

    static
    ZNL_Dense Create(uint Inputs, uint Outputs, double LearningRate=.1){
        ZNL_Dense Result=new('ZNL_Dense');
        Result.Inputs=Inputs;
        Result.Outputs=Outputs;
        ZGaussian StdNormDist=ZGaussian.Create();
        Result.In2Out=ZMatrix2.Create(Outputs, Inputs);
        for(int Row=0; Row<Outputs; Row++)
            for(int Column=0; Column<Inputs; Column++)
                Result.In2Out.Set(Row, Column, StdNormDist.Generate());
        Result.Bias=ZMatrix2.Create(Outputs, 1);
        for(int Row=0; Row<Outputs; Row++)
            Result.Bias.Set(Row, 0, StdNormDist.Generate());
        Result.LearningRate=LearningRate;
        return Result;
    }

    override
    ZMatrix2 Get(ZMatrix2 Input)
    {return Activation(In2Out.M2Mult(Input).Add(Bias));}

    override
    ZMatrix2 Weights()
    {return In2Out.Clone();}

    override
    ZMatrix2 Train(ZMatrix2 Input, ZMatrix2 LastError, ZMatrix2 LastWeights, bool Last){
        ZMatrix2 Error=(Last)?LastError:(LastWeights.Transpose().M2Mult(LastError)),
                Gradient=Activation(Get(Input), true)
                        .Mult(Error)
                        .SMult(LearningRate),
                DeltaOutput=Gradient.M2Mult(Input.Transpose());
        In2Out=In2Out.Add(DeltaOutput);
        Bias=Bias.Add(Gradient);
        return Error;
    }
}