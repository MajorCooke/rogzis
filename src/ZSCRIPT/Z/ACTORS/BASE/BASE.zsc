class ZActor:Actor{
    ZBrain Brain;

    override
    void BeginPlay(){
        super.BeginPlay();
        Brain=ZBrain(new("ZBrain_"..GetClassName()));
    }
}

class ZBrain_ZZZ:ZBrain{}

class ZZZ:ZActor{
    ZPlan Plan;

    [Property]{
        [Default]
        Radius=20;
        Height=56;
        [Type]
        Monster;
    }

    States{
        Spawn:
            POSS A 1{
                if(!Target)
                    Target=ZManager.Instance().WorldState.Player;
                if(CheckSight(Target)){
                    Plan=null;
                    A_MoveTo();
                }else{
                    A_Star();
                    if(Plan && Plan.Size()>0 && Plan.Peek()){
                        if(Distance3DSquared(ZPathNode(Plan.Peek()).Marker)<1){
                            Plan.Pop();
                            console.printf("yesx!");
                        }
                        if(Plan.Size()>0){
                            console.printf(ZPathNode(Plan.Peek()).Marker.Args[0].."aa");
                            A_MoveTo(ZPathNode(Plan.Peek()).Marker);
                        }
                    }else Plan=null;
                }
            }
            loop;
    }

    override
    void Tick(){
        super.Tick();
        Angle=ATan2(Vel.Y, Vel.X);
    }

    void A_Star(Actor Target=null, ZPathType Type=PATH_ALL){
        if(!Target){
            if(self.Target)
                Target=self.Target;
            else return;
        }
        ActorIterator it=ActorIterator.Create(ZTID_NODES, "ZPathMarker");
        double New,
               LastStart=double.MAX,
               LastTarget=double.MAX;
        ZPathMarker Start, Goal, Marker;

        while(Marker=ZPathMarker(it.Next())){
            if((New=Distance2D(Marker)+Marker.Distance2D(Target))<LastStart && CheckSight(Marker)){
                Start=Marker;
                LastStart=New;
            }
            if(New<LastTarget && Target.CheckSight(Marker)){
                Goal=Marker;
                LastTarget=New;
            }
        }
        Plan=ZManager.Instance().Graph(0).GetPlan(Start.Node, Goal.Node);
    }
}

class dd:DoomImp{
    States{
        Spawn:
            TROO A 1;
            loop;
    }
    // override
    // bool CanCollideWith(Actor Other, bool Passive){
    //     return Distance3D(Other)<=Radius+Other.Radius;
    // }
}