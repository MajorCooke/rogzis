class ZPlayerBase:PlayerPawn{
	double RunOscillation,
		   ActualRoll,
		   ActiveRoll,
		   PassiveRoll;

	Vector2 SideVector;

	Vector3 ViewVector;

	Actor AimTarget;

	ZQuaternion Orientation;

	Default{
        Species "Player";
	}

	override
	void PostBeginPlay(){
		super.PostBeginPlay();
		//View
		double XYLength=Cos(Pitch);
		Orientation=ZQuaternion.FromAngleAxis(ActualRoll=0, ViewVector=(Cos(Angle)*XYLength, Sin(Angle)*XYLength, -Sin(Pitch)));
		SideVector=ZCalc.V2Rotate(ViewVector.XY, -90);
	}

	override
	void Tick(){
		//Handle Voodoo Dolls
		super.Tick();
		if(!player || !player.mo || player.mo!=self || Health<=0)return;
		//Get Actor being aimed at
		AimTarget=GetAimTarget();
		//View
		if(Player.OnGround){
			PassiveRoll+=Sin(RunOscillation+=5*PI)*(Vel dot ViewVector)/50.;
			PassiveRoll+=(Vel.XY dot SideVector)/25.;
		}
		PassiveRoll*=(abs(PassiveRoll)>0.00001)?.75:0;
		HandleView();
		double TAngle, TPitch, TRoll;
		Orientation=Orientation.Unit();
    	[TAngle, TPitch, TRoll]=Orientation.GetEulerAngles();
    	A_SetAngle(abs(Angle)>179?TAngle:ZCalc.TransferSign(TAngle, Angle), SPF_INTERPOLATE);
		A_SetPitch(TPitch, SPF_INTERPOLATE);
		ActualRoll=TRoll;
		A_SetRoll(ActualRoll+ActiveRoll+PassiveRoll, SPF_INTERPOLATE);
		double XYLength=Cos(Pitch);
		ViewVector=(Cos(Angle)*XYLength, Sin(Angle)*XYLength, -Sin(Pitch));
		SideVector=ZCalc.V2Rotate(ViewVector.XY, -90);
    }

    virtual
    void HandleView()
	{Orientation.SetEulerAngles(Angle, Pitch, ActualRoll);}

    virtual
	Actor GetAimTarget(){
		FLineTraceData Data;
		Trace(Data, 2048);
		return Data.HitActor;
	}

	virtual
	bool Trace(out FLineTraceData Data, double Distance=1024, double Pitch=0)
	{return LineTrace(Angle, Distance, Pitch, data: Data);}
}

#include "ZSCRIPT/Z/PLYR/MAIN.zsc"
#include "ZSCRIPT/Z/PLYR/MOVEMENT.zsc"
#include "ZSCRIPT/Z/PLYR/INVENTORY.zsc"
