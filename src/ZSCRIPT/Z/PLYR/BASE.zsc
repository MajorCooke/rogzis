class ZPlayerBase:PlayerPawn{
	double RunOscillation,
		   ActualRoll,
		   ActiveRoll,
		   PassiveRoll;

	Vector3 ViewVector,
			SideVector;

	Actor AimTarget;

	ZQuaternion Orientation;

	override
	void PostBeginPlay(){
		super.PostBeginPlay();
		//View
		double XYLength=Cos(Pitch);
		SideVector=(Sin(Angle)*XYLength, Cos(Angle)*XYLength, -Sin(Pitch));
		Orientation=ZQuaternion.FromAngleAxis(ActualRoll=0, ViewVector=(Cos(Angle)*XYLength, Sin(Angle)*XYLength, -Sin(Pitch)));
	}

	override
	void Tick(){
		//Handle Voodoo Dolls
		super.Tick();
		if(!player || !player.mo || player.mo!=self || Health<=0)return;
		//Get Actor being aimed at
		AimTarget=GetAimTarget();
		//View
		HandleView();
		double TAngle, TPitch, TRoll;
    	[TAngle, TPitch, TRoll]=Orientation.GetEulerAngles();
    	A_SetAngle(TAngle, SPF_INTERPOLATE);
		A_SetPitch(TPitch, SPF_INTERPOLATE);
		A_SetRoll(TRoll+ActiveRoll+PassiveRoll, SPF_INTERPOLATE);
		double XYLength=Cos(Pitch);
		ViewVector=(Cos(Angle)*XYLength, Sin(Angle)*XYLength, -Sin(Pitch));
		SideVector=(Sin(Angle)*XYLength, Cos(Angle)*XYLength, -Sin(Pitch));
    }

    virtual
    void HandleView(){
		if(Player.OnGround){
			PassiveRoll+=(Vel dot SideVector)/25.;
			PassiveRoll+=Sin(RunOscillation+=5*PI)*(Vel dot ViewVector)/50.;
		}
		PassiveRoll*=(abs(PassiveRoll)>0.00001)?.75:0;
		Orientation.SetEulerAngles(Angle, Pitch, ActualRoll);
	}

    virtual
	Actor GetAimTarget(){
		FLineTraceData Data;
		Trace(Data, 2048);
		return Data.HitActor;
	}

	virtual
	bool Trace(out FLineTraceData Data, double Distance=1024, double Pitch=0)
	{return LineTrace(Angle, Distance, Pitch, data: Data);}
}

#include "ZSCRIPT/Z/PLYR/MAIN.zsc"
#include "ZSCRIPT/Z/PLYR/MOVEMENT.zsc"
#include "ZSCRIPT/Z/PLYR/INVENTORY.zsc"
