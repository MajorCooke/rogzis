class ZPlayerBase:PlayerPawn{
	double ActualYaw,
	       ActualPitch,
		   ActualRoll,
		   Shake,
		   ShakeLevel,
		   RunOscillation,
		   PassiveRoll;

	Vector2 SideVector;

	Vector3 ViewVector;

	Actor AimTarget;

	ZPerlin YawShake,
			PitchShake,
			RollShake;

	ZQuaternion Orientation;

	Default{
        Species "Player";
	}

	override
	void PostBeginPlay(){
		super.PostBeginPlay();
		//View
		ShakeLevel=1;
		double XYLength=Cos(ActualPitch=Pitch);
		Orientation=ZQuaternion.FromAngleAxis(ActualRoll=Roll=0, ViewVector=(Cos(ActualYaw=Angle)*XYLength, Sin(ActualYaw)*XYLength, -Sin(ActualPitch)));
		SideVector=ZCalc.V2Rotate(ViewVector.XY, -90);
	}

	override
	void Tick(){
		//Handle Voodoo Dolls
		super.Tick();
		if(!player || !player.mo || player.mo!=self || Health<=0)return;
		//Get Actor being aimed at
		AimTarget=GetAimTarget();
		//View
			//Screen Shake
			double CurrentShake=ShakeLevel*ZCalc.NormRange(ZCalc.SmoothStart(Shake)),
				   ActiveYaw=0, ActivePitch=0, ActiveRoll=0;
			if(CurrentShake>0){
				ActiveYaw=CurrentShake*ZCalc.DRangeMap(YawShake.Get(Level.MapTime%1000, 1), 2, 7, -2.5, 2.5);
				ActivePitch=CurrentShake*ZCalc.DRangeMap(PitchShake.Get(Level.MapTime%1000, 1), 2, 7, -2.5, 2.5);
				ActiveRoll=CurrentShake*ZCalc.DRangeMap(RollShake.Get(Level.MapTime%1000, 1), 2, 7, -5, 5);
				AddScreenShake(-.025);
			}
			//Tilt
			if(Player.OnGround){
				PassiveRoll+=Sin(RunOscillation+=5*ZCalc.PI)*(Vel dot ViewVector)/50.;
				PassiveRoll+=(Vel.XY dot SideVector)/25.;
			}
			PassiveRoll*=(abs(PassiveRoll)>0.00001)?.75:0;
			//Orientation
			HandleView();
			Orientation=Orientation.Unit();
			[ActualYaw, ActualPitch, ActualRoll]=Orientation.GetEulerAngles();
			ActualYaw=abs(Angle)>179?ActualYaw:ZCalc.TransferSign(ActualYaw, Angle);
			A_SetAngle(ActualYaw+ActiveYaw, SPF_INTERPOLATE);
			A_SetPitch(ActualPitch+ActivePitch, SPF_INTERPOLATE);
			A_SetRoll(ActualRoll+ActiveRoll+PassiveRoll, SPF_INTERPOLATE);
		//Direction Vectors
		double XYLength=Cos(Pitch);
		ViewVector=(Cos(Angle)*XYLength, Sin(Angle)*XYLength, -Sin(Pitch));
		SideVector=ZCalc.V2Rotate(ViewVector.XY, -90);
    }

	virtual
	void AddScreenShake(double Amount)
	{Shake=ZCalc.NormRange(Shake+Amount);}

    virtual
    void HandleView(){
		UserCmd cmd=Player.cmd;
		Orientation.SetEulerAngles(ActualYaw+ZCalc.DRangeMap(cmd.Yaw, -32767, 32767, -128, 128), Clamp(ActualPitch-ZCalc.DRangeMap(cmd.Pitch, -32767, 32767, -128, 128), -90, 90), ActualRoll);
	}
    virtual
	Actor GetAimTarget(){
		FLineTraceData Data;
		Trace(Data, 2048);
		return Data.HitActor;
	}

	virtual
	bool Trace(out FLineTraceData Data, double Distance=1024, double Pitch=0)
	{return LineTrace(Angle, Distance, Pitch, data: Data);}
}

#include "ZSCRIPT/Z/PLYR/MAIN.zsc"
#include "ZSCRIPT/Z/PLYR/MOVEMENT.zsc"
#include "ZSCRIPT/Z/PLYR/INVENTORY.zsc"
