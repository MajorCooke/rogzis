class ZPlayer:DoomPlayer{	
	int //Oxygen
		Oxygen,
		MaxOxygen;

	double LastVelLength;

	Actor AimTarget;

	//Oxygen
	Property Oxygen: Oxygen;
	Property MaxOxygen: MaxOxygen;
	
	Default{
		Player.ViewHeight 56;
		//Oxygen
		ZPlayer.Oxygen ZPlayerDefaults.MAX_OXYGEN;
		ZPlayer.MaxOxygen ZPlayerDefaults.MAX_OXYGEN;
	}
	
	override
	void PostBeginPlay(){
		super.PostBeginPlay();
		Parser_Zinf Config=ZManager.Config();
		//Player
			//Health
			A_SetHealth(Config.GetInt("HEALTH","iSTART_HEALTH"));
			MaxHealth=Config.GetInt("HEALTH","iMAX_HEALTH");
			RunHealth=floor(Config.GetInt("HEALTH","iRUN_HEALTH")*Config.GetDouble("HEALTH","dRUN_HEALTH_PERC"));
			//Inventory
			ZInv=ZInventory.Create();
			ArmorStats stts;
			stts.Energy=5000;
			stts.EnergyRechargeRate=200;
			stts.EnergyRechargeAmount=20;
			stts.IdleRechargeBonus=2;
			ThrustStats thrust;
			thrust.ThrustPower=10;
			thrust.DashTimer=12;
			thrust.DashCooldown=50;
			JetpackStats jetpack;
			jetpack.JetpackPower=5;
			jetpack.JetpackControl=.5;
			jetpack.JetpackCost=30;
			ZInv.Armor[AMR_TORSO]=ZArmor.Create("", "", AMR_TORSO, AMR_ENERGY|AMR_THRUST, stts, thrust, jetpack);
			ZInv.Armor[AMR_HANDS]=ZArmor.Create("", "", AMR_HANDS, AMR_ENERGY|AMR_THRUST, stts, thrust, jetpack);
			ZInv.Armor[AMR_LEGS]=ZArmor.Create("", "", AMR_LEGS, AMR_ENERGY|AMR_THRUST, stts, thrust, jetpack);
			ZInv.Armor[AMR_FEET]=ZArmor.Create("", "", AMR_FEET, AMR_ENERGY|AMR_THRUST|AMR_JETPACK, stts, thrust, jetpack);
	}
	
	override
	void Tick(){
		//Handle Voodoo Dolls
		super.Tick();
		if (!player || !player.mo || player.mo != self) return;
		//Get Actor being aimed at
		AimTarget=GetAimTarget();
		//Armor ticks
		for(int i=0; i<ZInv.Armor.Size(); i++)
			if(ZInv.Armor[i])ZInv.Armor[i].OnArmorTick(self);
		//Collision damage
		CheckCollisionDamage();
	}
	
	virtual
	bool Trace(double Distance=1024, double Pitch=0, out FLineTraceData Data=null)
	{return LineTrace(Angle, Distance, Pitch, data: Data);}
	
	virtual
	Actor GetAimTarget(){
		FLineTraceData Data;
		Trace(2048, data: Data);
		return Data.HitActor;
	}
	
	virtual
	void CheckCollisionDamage(){
		int Dam;
		if((Dam=abs(Vel.Length()-LastVelLength))>40)
			DamageMobj(self, self, Dam, 'Plasma', DMG_THRUSTLESS);
		LastVelLength=Vel.Length();
	}
	
	override
	void CheatGive (String name, int amount)
	{console.printf("WIP");}
}

