class ZMStats:Thinker{
    transient
    bool RechargeQueue;

    transient
    int OldStats,
        Recharger;

    const BaseHealth=#config "Stats", "iStart_Health";
    const MaxPlate=#config "Stats", "iStart_Plate";
    const BasePlateAbsorption=#config "Stats", "dPlate_Absorption";
    const BaseEnergy=#config "Abilities", "iMax_Energy";
    const EnergyRechargeRate=#config "Abilities", "iEnergy_Recharge_Rate";
    const EnergyRechargeAmount=#config "Abilities", "iEnergy_Recharge_Amount";
    const SprintCost=#config "Abilities", "iSprint_Cost";
    const SprintMultiplier=#config "Abilities", "dSprint_Multiplier";
    const RunHealthPercent=#config "Stats", "dRun_Health_Perc";
    const BaseShakeLevel=#config "Stats", "iShake_Level";

    int Intelligence,
        Willpower,
        Endurance,
        Strength,
        Defense,
        Agility,
        Luck,
        
        MaxStrain,

        //Health
        Health,
        MaxHealth,
        RunHealth,

        //Plating
        Plate,
        PlateAbsorption,

        //Energy
        Energy,
        MaxEnergy,
        IdleRechargeBonus;

    double ForwardMove1,
           ForwardMove2,
           BaseForwardMove,
           SideMove1,
           SideMove2,
           BaseSideMove,
           ViewBob,
           JumpZ,
           BaseJumpZ,
           ClamberSpeed,
           CriticalChance,

           ShakeLevel;

    ZManager Manager;

    Array<ZArmorUpgrade> Upgrades;

    static
    ZMStats Instance(){
        ThinkerIterator it=ThinkerIterator.Create("ZMStats", STAT_STATIC);
        ZMStats p=ZMStats(it.Next());
        if(!p)p=new("ZMStats").Init();
        return p;
    }

    private
    ZMStats Init(){
        ChangeStatNum(STAT_STATIC);
        Manager=ZManager.Instance();
        //Attributes
        Intelligence=
        Willpower=
        Endurance=
        Strength=
        Defense=
        Agility=
        Luck=0;
        //Stats
        ForwardMove2=(ViewBob=ForwardMove1=BaseForwardMove=.65)/2;
        SideMove2=(SideMove1=BaseSideMove=.52)/2;
        JumpZ=BaseJumpZ=7;
        ClamberSpeed=1;
        Health=#config "Stats","iStart_Health";
        MaxHealth=BaseHealth;
        RunHealth=MaxHealth*RunHealthPercent;
        Plate=MaxPlate;
        PlateAbsorption=BasePlateAbsorption;
        MaxEnergy=Energy=BaseEnergy;
        IdleRechargeBonus=2;
        ShakeLevel=BaseShakeLevel;
        //Inventory
        MaxStrain=20;
        AddUpgrade("LongFall");
        AddUpgrade("BoostDash");
        AddUpgrade("Shield");
        AddUpgrade("BoostJump");
        AddUpgrade("Magnet");
        AddUpgrade("Jetpack");
        ToggleUpgrade("BoostJump");
        ToggleUpgrade("BoostDash");
        ToggleUpgrade("LongFall");
        //ToggleUpgrade("Magnet");
        ToggleUpgrade("Jetpack");
        return self;
    }

    int, int, int GetHealth() const
    {return Health, MaxHealth, RunHealth;}

    double, double, double GetForwardMove() const
    {return ForwardMove1, ForwardMove2, SprintMultiplier;}

    double, double GetSideMove() const
    {return SideMove1, SideMove2;}

    int GetStrain() const{
        int TotalStrain=0;
        for(int i=0; i<Upgrades.Size(); i++)
            if(Upgrades[i].Activated)
                TotalStrain+=Upgrades[i].Strain;
        return TotalStrain;
    }

    void UpdateStats(){
        RunHealth=MaxHealth*RunHealthPercent;
        PlateAbsorption=(1+.12*Min(Defense, 25))*BasePlateAbsorption;
        MaxEnergy=(1+.04*Endurance)*BaseEnergy;
        ShakeLevel=(1-.001*(Willpower+Strength))*BaseShakeLevel;
        ForwardMove2=(ViewBob=ForwardMove1=(1+.01*Agility)*BaseForwardMove)/2;
        SideMove2=(SideMove1=(1+.01*Agility)*BaseSideMove)/2;
        JumpZ=.015*(Strength+Agility)+BaseJumpZ;
        ClamberSpeed=1+.02*(Strength+Agility);
        CriticalChance=.001*Luck;
    }

    void SortUpgrades(){
        int N=Upgrades.Size();
        for(int i=0; i<Upgrades.Size(); i++){
            int IndexOfMax=i;
            for(int j=i+1; j<N; j++){
                if(Upgrades[j].Order>Upgrades[IndexOfMax].Order)
                    IndexOfMax=j;
            }
            if(IndexOfMax!=i){
                ZArmorUpgrade Temp=Upgrades[i];
                Upgrades[i]=Upgrades[IndexOfMax];
                Upgrades[IndexOfMax]=Temp;
            }
        }
    }

    bool AddUpgrade(Name ID){
        ZArmorUpgrade Upgrade=ZArmorUpgrade(Manager.Upgrade(UPR_MARMOR, ID));
        if(Upgrades.Find(Upgrade)!=Upgrades.Size())return false;
        Upgrades.Push(Upgrade);
        SortUpgrades();
        return true;
    }

    bool ToggleUpgrade(Name ID){
        int Index;
        ZArmorUpgrade Upgrade=ZArmorUpgrade(Manager.Upgrade(UPR_MARMOR, ID));
        if(!Upgrade || (!Upgrade.Activated && Upgrade.Strain+GetStrain()>MaxStrain) || (Index=Upgrades.Find(Upgrade))==Upgrades.Size())return false;
        Upgrades[Index].Activated=!Upgrades[Index].Activated;
        return true;
    }

    virtual
    void ArmorTick(ZMarine Player){
        if(!Player || Player.Health<=0 || Plate<=0)return;
        RechargeQueue=true;
        Recharge(Player);
        for(int i=0; i<Upgrades.Size(); i++){
            if(Upgrades[i].Activated)
                Upgrades[i].Tick(Player, Player.Player);}
    }

    virtual
    void HandleMovement(ZMarine Player){
        for(int i=0; i<Upgrades.Size(); i++)
            if(Upgrades[i].Activated)
                Upgrades[i].HandleMovement(Player, Player.Player);
    }

    virtual
    private
    void Recharge(ZPlayer Player){
        int ShieldGoal;
        if(Energy<MaxEnergy){
            RechargeQueue=false;
            if(Recharger==EnergyRechargeRate){
                Energy=Min(Energy+EnergyRechargeAmount*(Player.Vel==(0,0,0)?IdleRechargeBonus:1), MaxEnergy);
                if(Energy==MaxEnergy)Recharger=0;
            }else Recharger++;
        }
    }

    virtual
    int ModifyDamageGiven(ZWeapon Weapon, int Damage, Name Mod, int Flags=0){
        switch(Mod){
            case 'Melee':
                Damage*=1+.03*Strength;
                break;
        }
        return Damage+(FRandom(0, 1)<=CriticalChance*Weapon.CriticalMultiplier())*Weapon.CriticalDamage;
    }

    virtual
    int ModifyDamageTaken(Actor Inflictor, Actor Source, int Damage, Name Mod, int Flags=0, double Angle=0){
        ZDamageType DamageType=Manager.DamageType(Mod);
        if(!DamageType){
            ZManager.Error(String.Format("Undefined ZDamageType: %s", Mod), ERR_ERROR);
            return Damage;
        }
        double Dam, TempDamage=Damage;
        Array<ZArmorUpgrade> Upgrades;
        for(int i=0; i<Upgrades.Size(); i++)
            if(Upgrades[i].Activated)
                TempDamage=Upgrades[i].ModifyDamage(Inflictor, Source, TempDamage, DamageType, Flags, Angle);
        int PlateHit;
        //Armor Plating
        if(/*(Info & AMR_PLATE)*/true){
            if((Dam=TempDamage*DamageType.Factor(AMR_PLATE))>0){
                TempDamage*=1-Floor(PlateHit=PlateAbsorption*ZCalc.DRangeMap(Plate/MaxPlate, 0, 1, 0, 1.5));
                Plate=Max(Plate-PlateHit, 0);
            }
        }else Plate=Max(Plate-Ceil(TempDamage/2), 0);
        return Ceil(TempDamage);
    }
}