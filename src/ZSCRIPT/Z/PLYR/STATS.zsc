class ZStats:Thinker{
    transient
    int OldStats,
        Recharger;

    bool DashAvailable;

    int Health,
        Plate,
        MaxPlate,
        PlateAbsorption,
		ThrustPower,
		DashTimer,
		DashCooldown,
        JetpackPower,
		JetpackCost,

        //Energy
		Energy,
		MaxEnergy,
		IdleRechargeBonus,
		EnergyRechargeRate,
		EnergyRechargeAmount,

		//Magnetic Repulsion
        Magnet,
        MaxMagnet,
		MagnetRechargeRate,
		MagnetRechargeAmount,

		//Plasma Shield
        Shield,
        MaxShield,
        ShieldDivider,
		ShieldRechargeRate,
		ShieldRechargeAmount,

		//Hard Light Construct
        Light,
        MaxLight,
		LightChargeUp,
		LightRechargeRate,
		LightRechargeAmount;
    //Sprint
	const SprintCost=ZPlayerDefaults.SPRINT_COST;
	//Dash
	const DashCost=ZPlayerDefaults.DASH_COST;
	//Jump
	const JumpCost=ZPlayerDefaults.JUMP_COST;

    double ActualYaw,
	       ActualPitch,
		   ActualRoll,
           JetpackControl;

    ArmorInfo Info;

	ZQuaternion Orientation;

    ZArmor MArmor[5];

    static
	ZStats Instance(ZStatNum STAT_NUM=STAT_ZDATA){
		ThinkerIterator it=ThinkerIterator.Create("ZStats", STAT_NUM);
		ZStats p=ZStats(it.Next());
		if(!p)p=new("ZStats").Init();
		return p;
	}

	private
	ZStats Init(){
		ChangeStatNum(STAT_STATIC);
        //Inventory
        MaxEnergy=Energy=2000;
        EnergyRechargeRate=200;
        EnergyRechargeAmount=20;
        IdleRechargeBonus=2;
    	ThrustPower=10;
        DashTimer=18;
        DashCooldown=50;
        JetpackPower=5;
        JetpackControl=.5;
        JetpackCost=30;
        Info=AMR_ENERGY;
        MArmor[AMR_TORSO]=ZArmor.Create(AMR_THRUST);
        MArmor[AMR_HANDS]=ZArmor.Create(AMR_THRUST);
        MArmor[AMR_LEGS]=ZArmor.Create(AMR_THRUST);
        MArmor[AMR_FEET]=ZArmor.Create(AMR_THRUST);
        return self;
    }

	static
	void StatNum(ZStatNum STAT_NUM1=STAT_ZDATA, ZStatNum STAT_NUM2=STAT_ZDATA){
		ZStats Stats;
		if(Stats=Instance(STAT_NUM1))
			Stats.ChangeStatNum(STAT_NUM2);
	}

    virtual
    int Status()
    {return Health+Energy+Plate+Magnet+Shield+Light;}

    virtual
	void Recharge(ZPlayerBase Player){
		if(!Player || Player.Health<=0 || ~Info & AMR_ENERGY)return;
		//This Tick
		int CurrentStats=Status();
		if(CurrentStats>=OldStats){
			int ShieldGoal;
			if(Energy<MaxEnergy){
				if(Recharger==EnergyRechargeRate){
					Energy=Min(Energy+EnergyRechargeAmount*(Player.Vel==(0,0,0)?IdleRechargeBonus:1), MaxEnergy);
					if(Energy==MaxEnergy)Recharger=0;
				}else Recharger++;
			}else if((Info & AMR_MAGNET) && Magnet<MaxMagnet){
				if(Recharger==MagnetRechargeRate){
					Magnet=Min(Magnet+MagnetRechargeAmount*(Player.Vel==(0,0,0)?IdleRechargeBonus:1), MaxMagnet);
					if(Magnet==MaxMagnet)Recharger=0;
				}else Recharger++;
			}else if((Info & AMR_SHIELD) && Shield<(ShieldGoal=int(Shield/ShieldDivider+1)*ShieldDivider)){
				if(Recharger==ShieldRechargeRate){
					Shield=Min(Shield+ShieldRechargeAmount*(Player.Vel==(0,0,0)?IdleRechargeBonus:1), ShieldGoal);
					if(Shield==ShieldGoal)Recharger=0;
				}else Recharger++;
			}else if((Info & AMR_LIGHT) && Light==0){
				if(LightChargeUp==MaxLight){
					Light=MaxLight;
					Recharger=LightChargeUp=0;
				}else if(Recharger==LightRechargeRate)
					LightChargeUp=Min(LightChargeUp+LightRechargeAmount*(Player.Vel==(0,0,0)?IdleRechargeBonus:1), MaxLight);
				else Recharger++;
			}
		}else Recharger=0;
		//Last Tick
		OldStats=Status();
	}

    virtual
	int ModifyDamage(Actor Inflictor, Actor Source, int Damage, Name Mod, int Flags=0, double Angle=0){
		ZDamageType DamageType=ZManager.DamageType(Mod);
		if(!DamageType){
			ZManager.Error(String.Format("Undefined ZDamageType: %s", Mod), ERR_ERROR);
			return Damage;
		}
		double Dam, TempDamage=Damage;
		//Powered Armor
		if(Info & AMR_ENERGY){
			if(Info & AMR_MAGNET)
				if((Dam=TempDamage*DamageType.Factor(AMR_MAGNET))>0)
					if(Ceil(Dam)<=Magnet){
						Magnet-=Dam;
						return 0;
					}else{
						TempDamage-=Floor(Magnet/DamageType.Factor(AMR_MAGNET));
						Magnet=0;
					}
				else if(Dam<0){
					Magnet=Floor(Magnet-Ceil(Dam), MaxMagnet);
					return 0;
				}
			if(Info & AMR_LIGHT)
				if((Dam=TempDamage*DamageType.Factor(AMR_LIGHT))>0)
					if(Ceil(Dam)<=Light){
						Light-=Dam;
						return 0;
					}else{
						TempDamage-=Floor(Light/DamageType.Factor(AMR_LIGHT));
						Light=0;
					}
				else if(Dam<0){
					Light=Floor(Light-Ceil(Dam), MaxLight);
					return 0;
				}
			if(Info & AMR_SHIELD)
				if((Dam=TempDamage*DamageType.Factor(AMR_SHIELD))>0)
					if(Ceil(Dam)<=Shield){
						Shield-=Dam;
						return 0;
					}else{
						TempDamage-=Floor(Shield/DamageType.Factor(AMR_SHIELD));
						Shield=0;
					}
				else if(Dam<0){
					Shield=Floor(Shield-Ceil(Dam), MaxShield);
					return 0;
				}
		}
		int PlateHit;
		//Armor Plating
		if((Info & AMR_PLATE)){
			if((Dam=TempDamage*DamageType.Factor(AMR_PLATE))>0){
				TempDamage*=1-Floor(PlateHit=PlateAbsorption*ZCalc.DRangeMap(Plate/MaxPlate, 0, 1, 0, 1.5));
				Plate=Max(Plate-PlateHit, 0);
			}
		}else Plate=Max(Plate-Ceil(TempDamage/2), 0);
		return Ceil(TempDamage);
	}
}