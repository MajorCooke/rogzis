extend
class ZPlayer{
	Default{
		//Movement
		Player.ForwardMove ZPlayerDefaults.WALK_SPEED, ZPlayerDefaults.WALK_SPEED/2;
		Player.SideMove ZPlayerDefaults.STRAFE_SPEED, ZPlayerDefaults.STRAFE_SPEED/2;
		Player.ViewBob ZPlayerDefaults.WALK_SPEED;
		Player.JumpZ 8;
	}
	
	override
	void HandleMovement(){
		let Player = self.Player;
		// [RH] Check for fast turn around
		if ((Player.cmd.buttons & BT_TURN180) && (~Player.oldbuttons & BT_TURN180))
			Player.turnticks = TURN180_TICKS;
		// Handle Movement
		if (reactiontime)
			// Player is frozen
			reactiontime--;
		else{
			MovePlayer();
			CheckMoveUpDown();
			for(int i=0; i<ZInv.ArMor.Size(); i++)
				if(ZInv.ArMor[i])ZInv.ArMor[i].HandleArMorMovement(self);
			if(ZInv.ArMor[AMR_FEET])ZInv.ArMor[AMR_FEET].CheckJump(self, Player);
			else CheckJump();
			MaxStepHeight=(Player.CrouchOffset!=0)?12:24; 
		}
	}

	override
	void MovePlayer (){
		let Player = self.Player;
		UserCmd cmd = Player.cmd;

		// [RH] 180-degree turn overrides all other yaws
		if (Player.turnticks)
		{
			Player.turnticks--;
			Angle += (180. / TURN180_TICKS);
		}
		else Angle += cmd.yaw * (360./65536.);

		Player.OnGround = (Pos.Z <= FloorZ) || bOnMobj || bMBFBouncer || (Player.Cheats & CF_NOCLIP2);

		// killough 10/98:
		//
		// We must apply thrust to the Player and bobbing separately, to avoid
		// anomalies. The thrust applied to bobbing is always the same strength on
		// ice, because the Player still "works just as hard" to Move, while the
		// thrust applied to the Movement varies with 'MoveFactor'.

		if (cmd.forwardMove | cmd.sideMove){
			double MoveFactor,
				   BobFactor,
				   Friction,
				   ForwardMove,
				   SideMove;

			[Friction, MoveFactor] = GetFriction();
			BobFactor=Friction<ORIG_FRICTION?MoveFactor:ORIG_FRICTION_FACTOR;
			if (!Player.OnGround && !bNoGravity && !waterlevel){
				// [RH] allow very limited Movement if not on ground.
				MoveFactor*=Level.AirControl;
				BobFactor*=Level.AirControl;
				for(int i=1; i<ZInv.ArMor.Size(); i++)
					if(ZInv.ArMor[i]){
						MoveFactor*=ZInv.ArMor[i].CheckAirControl();
						BobFactor*=ZInv.ArMor[i].CheckAirControl();
					}
			}

			ForwardMove=cmd.ForwardMove;
			SideMove=cmd.SideMove;
			[ForwardMove, SideMove]=TweakSpeeds(ForwardMove, SideMove);
			ForwardMove*=Speed/256;
			SideMove*=Speed/256;

			// When crouching, speed and bobbing have to be reduced
			if (CanCrouch() && Player.CrouchFactor != 1){
				ForwardMove *= Player.CrouchFactor;
				SideMove *= Player.CrouchFactor;
				BobFactor *= Player.CrouchFactor;
			}

			ForwardMove*=MoveFactor*(35/TICRATE);
			SideMove*=MoveFactor*(35/TICRATE);

			if(ZInv.ArMor[AMR_TORSO])ForwardMove*=ZInv.ArMor[AMR_TORSO].CheckSprint(self, Player);
			else if(Player.cmd.buttons & BT_BACK)ForwardMove*=SideMove1;

			if (ForwardMove)
			{
				Bob(Angle, cmd.ForwardMove * BobFactor / 256., true);
				ForwardThrust(ForwardMove, Angle);
			}
			if (SideMove)
			{
				let a = Angle - 90;
				Bob(a, cmd.SideMove * BobFactor / 256., false);
				Thrust(SideMove, a);
			}

			if ((~Player.Cheats & CF_PREDICTING) && (ForwardMove!=0 || SideMove!=0))PlayRunning ();

			if (Player.Cheats & CF_REVERTPLEASE){
				Player.Cheats &= ~CF_REVERTPLEASE;
				Player.Camera = Player.Mo;
			}
		}
	}
	
	override
	void CheckJump(){
		let Player = self.Player;
		// [RH] check for jump
		if (Player.cmd.buttons & BT_JUMP)
			if (Player.CrouchOffset!=0)
				// Jumping while crouching will force an un-crouch but not jump
				Player.Crouching=1;
			else if (WaterLevel>=2)Vel.Z=4*Speed;
			else if (bNoGravity)Vel.Z=3.;
			else if (level.IsJumpingAllowed() && Player.OnGround && Player.JumpTics == 0){
				double JumpVelZ=JumpZ*35/TICRATE;
				double JumpFac=0;

				if(IsHeavy())JumpVelZ/=2;

				// [BC] If the Player has the high jump power, double his jump velocity.
				// (actually, pick the best factors from all active items.)
				for (PowerHighJump p=PowerHighJump(Inv); p!=null; p=PowerHighJump(p.Inv))
					if(p && p.Strength>JumpFac)JumpFac=p.Strength;

				if(JumpFac>0)JumpVelZ*=JumpFac;

				Vel.Z+=JumpVelZ;
				bOnMobj=false;
				Player.JumpTics=-1;
				if(~Player.Cheats & CF_PREDICTING)A_PlaySound("*jump", CHAN_BODY);
			}
	}
}