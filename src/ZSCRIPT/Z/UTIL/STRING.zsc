struct ZString{
    enum ZE_StrSys{
        English =   1<<0,
        Base64  =   1<<1,
    }

    enum ZE_StrCase{
        Upper   =   1<<2,
        Lower   =   1<<3,
    }

    static
    String Character(uint Index, ZE_StrSys Type=English){
        String Result;
        if(Type & English){
            static const Name Letters[]={
                'A', 'B',
                'C', 'D',
                'E', 'F',
                'G', 'H',
                'I', 'J',
                'K', 'L',
                'M', 'N',
                'O', 'P',
                'Q', 'R',
                'S', 'T',
                'U', 'V',
                'W', 'X',
                'Y', 'Z'
            };
            Result=Letters[Index];
            if(Type & Lower)
                Result.ToLower();
            else if(Type & Upper)
                Result.ToUpper();
        }else if(Type & Base64){
            static const String Base64Table[]={
                "A", "B", "C", "D", "E", "F", "G", "H",
                "I", "J", "K", "L", "M", "N", "O", "P",
                "Q", "R", "S", "T", "U", "V", "W", "X",
                "Y", "Z", "a", "b", "c", "d", "e", "f",
                "g", "h", "i", "j", "k", "l", "m", "n",
                "o", "p", "q", "r", "s", "t", "u", "v",
                "w", "x", "y", "z", "0", "1", "2", "3",
                "4", "5", "6", "7", "8", "9", "+", "/"
            };
            Result=Base64Table[Index];
        }
        return Result;
    }

    static
    int IndexOf(String Character, ZE_StrSys Type=English){
        uint Index;
        if(Type & English){
            static const Name Letters[]={
                'A', 'B',
                'C', 'D',
                'E', 'F',
                'G', 'H',
                'I', 'J',
                'K', 'L',
                'M', 'N',
                'O', 'P',
                'Q', 'R',
                'S', 'T',
                'U', 'V',
                'W', 'X',
                'Y', 'Z'
            };
            for(int i=0; i<Letters.Size(); i++)
                if(Character==Letters[i])
                    return i;
        }else if(Type & Base64){
            static const String Base64Table[]={
                "A", "B", "C", "D", "E", "F", "G", "H",
                "I", "J", "K", "L", "M", "N", "O", "P",
                "Q", "R", "S", "T", "U", "V", "W", "X",
                "Y", "Z", "a", "b", "c", "d", "e", "f",
                "g", "h", "i", "j", "k", "l", "m", "n",
                "o", "p", "q", "r", "s", "t", "u", "v",
                "w", "x", "y", "z", "0", "1", "2", "3",
                "4", "5", "6", "7", "8", "9", "+", "/"
            };
            for(int i=0; i<Base64Table.Size(); i++)
                if(Character==Base64Table[i])
                    return i;
        }
        ZManager.Error("Character does not exist in designated set", ERR_ERROR);
        return -1;
    }

    static
    String Offset(String Character, int Offset, ZE_StrSys Type=English)
    {return Character(IndexOf(Character)+Offset, Type);}

    static
    String Substring(String Str, int StartIndex, int EndIndex)
    {return Str.Mid(StartIndex, EndIndex-StartIndex);}

    static
    bool IsLetter(String Character){
        static const Name Letters[]={
            'A', 'B',
            'C', 'D',
            'E', 'F',
            'G', 'H',
            'I', 'J',
            'K', 'L',
            'M', 'N',
            'O', 'P',
            'Q', 'R',
            'S', 'T',
            'U', 'V',
            'W', 'X',
            'Y', 'Z'
        };
        for(int i=0; i<Letters.Size(); i++)
            if(Character==Letters[i])
                return true;
        return false;
    }

    static
    bool IsDigit(String Character){
        static const Name Digits[]={
            '0', '1', '2', '3', '4',
            '5', '6', '7', '8', '9'
        };
        for(int i=0; i<Digits.Size(); i++)
            if(Character==Digits[i])
                return true;
        return false;
    }

    static
    bool IsPunctuation(String Character){
        static const String Punctuation[]={
            "!", "\"", "#", "$", "%", "&", "'", "(",
            ")",  "*", "+", ",", "-", ".", "/", ":", 
            ";",  "<", "=", ">", "?", "@", "[", "]",
            "^",  "_", "`", "{", "Â¦", "}", "~"
        };
        for(int i=0; i<Punctuation.Size(); i++)
            if(Character==Punctuation[i])
                return true;
        return false;
    }
}