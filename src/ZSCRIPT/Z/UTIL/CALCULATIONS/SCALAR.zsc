struct ZCalc_S{
    bool OtherwiseTheStructWontResolve;

    static
    bool Equals(double FirstValue, double SecondValue, double Epsilon=double.Epsilon)
    {return Abs(FirstValue-SecondValue)<=Epsilon;}

    static
    int ShiftOf(int Value){
        int Shifts=0;
        while(Value>1){
            Value>>=1;
            Shifts++;
        }
        return Shifts;
    }

    static
    int Sign(double Value)
    {return !Equals(Value, 0)*((Value<0)?-1:1);}

    static
    double TransferSign(double Value, double Sign)
    {return Abs(Value)*Sign(Sign);}

    static
    int Alternate(int n, bool Offset=false)
    {return -1**(n-Offset);}

    static
    int Round(double Value)
    {return (Abs(Value%1)>=.5)?Ceil(Value):Floor(Value);}

    static
    double NormRangeMap(double Value, double Start, double End)
    {return Clamp((Value-Start)/(End-Start), 0, 1);}

    static
    double ANormRangeMap(double Value, double Start, double End)
    {return Clamp(Value*(End-Start)+Start, Start, End);}

    static
    int IRangeMap(int Value, int OldStart, int OldEnd, int NewStart, int NewEnd)
    {return ANormRangeMap(Clamp((Value-OldStart)/(OldEnd-OldStart), 0, 1), NewStart, NewEnd);}

    static
    double DRangeMap(double Value, double OldStart, double OldEnd, double NewStart, double NewEnd)
    {return ANormRangeMap(NormRangeMap(Value, OldStart, OldEnd), NewStart, NewEnd);}

    static
    double AsymptoticMean(double X, double Target, double Weight=.1)
    {return (Target-X)*(1-Weight);}

    static
    int Factorial(int N){
        if(N>0)return N*Factorial(N-1);
        else if(N==0)return 1;
        else ZManager.Error("Attempted factorial of a negative number", ERR_FATAL);
        return 0;
    }

    static
    int nCr(int N, int K)
    {return Factorial(N)/(Factorial(K)*Factorial(N-K));}

    static
    int NthTriNumber(int N)
    {return N*(N+1)/2;}

    static
    double Bernstein(double Time, int N, int V)
    {return nCr(N, V)*Time**V*(1-Time)**(N-V);}

    static
    double Lerp(double Time, double Start=0, double End=1){
        Time=Clamp(Time, 0, 1);
        return (1-Time)*Start+Time*End;
    }

    static
    double SmoothStart(double Time, double Start=0, double End=1, double Degree=2)
    {return ANormRangeMap(NormRangeMap(Time, Start, End)**Degree, Start, End);}

    static
    double SmoothStop(double Time, double Start=0, double End=1, double Degree=2)
    {return ANormRangeMap(1-(1-NormRangeMap(Time, Start, End))**Degree, Start, End);}

    static
    double SmoothStep(double Time, double Start=0, double End=1, double Degree=2)
    {return Lerp(Time, SmoothStart(Time, Start, End, Degree), SmoothStop(Time, Start, End, Degree));}
}

class ZLeftInterpolator{
    protected
    int CurrentValue;

    static
    ZLeftInterpolator Create(int DesiredValue){
        ZLeftInterpolator Interpolator = new('ZLeftInterpolator');
        Interpolator.Reset(DesiredValue);
        return Interpolator;
    }

    void Reset(int DesiredValue)
    {CurrentValue=DesiredValue;}

    // This must be called peroiodically in the status bar's Tick function.
    // Do not call this in the Draw function because that may skip some frames!
    void Update(int DesiredValue){
        for(int i=9; i>=0; i--){
            int Place=10**i;
            if(CurrentValue/Place>DesiredValue/Place){
                CurrentValue-=Place;
                break;
            }else if(CurrentValue/Place<DesiredValue/Place){
                CurrentValue+=Place;
                break;
            }
        }
    }

    // This must be called in the draw function to retrieve the value for output.
    int GetValue() const
    {return CurrentValue;}
}