class ZCalc_V2:ZSingleton{
    bool OtherwiseTheStructWontResolve;

    static
    Vector2 Lerp(double Time, Vector2 Start=(0, 0), Vector2 End=(1, 1)){
        Time=Clamp(Time, 0, 1);
        return (1-Time)*Start+Time*End;
    }

    static
    Vector2 SmoothStart(double Time, Vector2 Start=(0, 0), Vector2 End=(1, 1), double Degree=2)
    {return Clamp(Time, 0, 1)**Degree*(End-Start)+Start;}

    static
    Vector2 SmoothStop(double Time, Vector2 Start=(0, 0), Vector2 End=(1, 1), double Degree=2)
    {return (1-(1-Clamp(Time, 0, 1))**Degree)*(End-Start)+Start;}

    static
    Vector2 SmoothStep(double Time, Vector2 Start=(0, 0), Vector2 End=(1, 1), double Degree=2)
    {return Lerp(Time, SmoothStart(Time, Start, End, Degree), SmoothStop(Time, Start, End, Degree));}

    // static
    // Vector2 V2Bezier(double Time, ZMatrix2 Points, bool Row=true){
    //     Vector2 Total=(0, 0);
    //     for(int i=0; i<(Row)?Points.Height()/2:Points.Width()/2; i++)
    //         Total+=Points.V2Get(i*Row, i*!Row, Row)*Bernstein(Time, Points.Height(), i);
    //     return Total;
    // }

    static
    bool IsInTriangle(Vector2 Point, Vector2 A, Vector2 B, Vector2 C){
        Vector2 C2A=C-A,
                B2A=B-A,
                P2A=Point-A;
        int C2C=C2A dot C2A,
            C2B=C2A dot B2A,
            C2P=C2A dot P2A,
            B2B=B2A dot B2A,
            B2P=B2A dot P2A,
            InverseDenominator=1/(C2C*B2B-C2B**2),
            U=InverseDenominator*(B2B*C2P-C2B*B2P),
            V=InverseDenominator*(C2C*B2P-C2B*C2P);
            return U>=0 && V>=0 && U+V<1;
    }

    static
    Vector2 CenterOfMass(Vector2 A, Vector2 B, Vector2 C, double AWeight=1, double BWeight=1, double CWeight=1)
    {return (A*AWeight+B*BWeight+C*CWeight)/(AWeight+BWeight+CWeight);}
}